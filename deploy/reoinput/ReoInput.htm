<template id="ReoInputWidgetTemplate">
	<style>
		.spinbut{
			width:15px;
			display:block;
			font-size:5px;
			margin:0px;
			padding:0px;
			text-align:center;
		}
		#barcode{
			text-align:right;
			width:3.6em;
			padding: 0 3px;
			font-weight:bold;
		}
		#barcode:enabled{
			color:darkblue;
		}
		#barcode:invalid{
			color:red;
			background-color: yellow;
		}
		input:invalid{
			color:red;
			background-color: yellow;
		}
		input[type=number]::-webkit-inner-spin-button,
		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
		div:hover{
			background-color:#E6E6FF;
		}
	</style>
	<div style="min-width:315px;max-width:500px;">
		<table id="rin" style="color:inherit;width:100%;" cellspacing=0>
			<tr>
				<td rowspan=1 style="padding:0;">
					<input id="enabled" type="checkbox" />
				</td>
				<td style="text-align:right;">
					<input id="barcode" type="text" required pattern="([1-2][0-9]|[1-9])N(10|12|16|20|24|28|32|36|40)" value="2N10" placeholder="eg. 2N10" />
					
				</td>
				<td style="text-align:left;">
					<button tabindex="-1" class="spinbut" id="spinbutup">&#9650;</button>
					<button tabindex="-1" class="spinbut" id="spinbutdown">&#9660;</button>
				</td>
				<td style="text-align:right;padding-left:0.5em;">
					<input type="number" required min="0" max="10000" value="0" style="text-align:right;width:4em;"/>
				</td>
				<td style="text-align:left;padding-left:0;">
					mm
				</td>
				<td style="text-align:right;padding-right:0;padding-left:0.5em;">
					from
				</td>
				<td>
					<select style="">
						<option value="top">top</option>
						<option value="highest">highest</option>
						<option value="lowest" selected>lowest</option>
						<option value="bottom">bottom</option>
					</select>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoInputWidgetScript">
	ReoInputPrototype = Object.create(HTMLDivElement.prototype);
	ReoInputPrototype.createdCallback = function(){
		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoInputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			
			
			
			// ---------
			// PROPERTIES
			this.selected = false;
			this.maindiv = this.doc.querySelector("div");
			this.enabledCheck = this.doc.querySelector("#enabled");
			this.barcodeIn = this.doc.querySelector("#barcode");
			this.spinbutup = this.doc.querySelector("#spinbutup");
			this.spinbutdown = this.doc.querySelector("#spinbutdown");
			this.enabled=false;
			
			
			// -----------------------------------------------------
			// EVENT LISTENERS
			this.addEventListener("mouseup",this.select);
			this.addEventListener("keyup",this.select);
			this.spinbutup.addEventListener("click",this.more);
			this.spinbutdown.addEventListener("click",this.less);
			
			this.enabledCheck.addEventListener("change",function(){
				this.enabled = this.enabled;
				this.select();
			}.bind(this));
			
			this.barcodeIn.addEventListener("keydown",function(e){
				if(e.keyCode == 38){	// up button
					this.more();
					e.preventDefault();
				}
				if(e.keyCode == 40){	// down button
					this.less();
					e.preventDefault();
				}
			}.bind(this))
			
			this.barcodeIn.addEventListener("input",function(e){
				var val = e.target.value;
				var ss = e.target.selectionStart;
				var se = e.target.selectionEnd;
				var arr = val.split("")
				var flag = false;
				var noN = true;
				for(var i=0;i<arr.length;i++){
					
					if((/[^0-9nN]/).test(arr[i])){
						arr.splice(i--,1);
						;
						if(i<ss){
							ss--;
							se=ss;
						}
					}
					if(arr[i]=="N"){
						noN = false;
					}
				}
				val = arr.join("");
				val = val.toUpperCase();
				e.target.value =  val;
				e.target.setSelectionRange(ss,se);
			}.bind(this))
			
		}.bind(this)
		
		this.more = function(){
			console.log("more")
		}.bind(this);
		this.less = function(){
			console.log("less")
		}.bind(this);
		
		Object.defineProperty(this,"enabled",{
			get:function(){
				return this.enabledCheck.checked;
			}.bind(this),
			set:function(newval){
				this.enabledCheck.checked = newval;
				var ins = this.doc.querySelectorAll("input, button, select")
				for(var i = 0; i < ins.length;i++){
					if(ins[i].id!="enabled"){
						ins[i].disabled=!newval;
					}
				}
				if(newval){
					this.maindiv.style.color = "";
				}else{
					this.maindiv.style.color = "grey";
				}
			}.bind(this),
		});
		this.select = function(){
			this.selected = true;
			var others = document.querySelectorAll("reo-input");
			for(var i = 0; i<others.length;i++){
				others[i].deselect();
			}
			console.log();
			if(this.enabled){
				this.maindiv.style.backgroundColor = "lightblue";
			}else{
				this.maindiv.style.backgroundColor = "lightgrey";
			}
		}.bind(this);
		this.deselect = function(){
			this.selected = false;
			this.maindiv.style.backgroundColor = "";
		}.bind(this);
		this.create();
	};
	
	
	
	var ReoInput = document.registerElement("reo-input",{prototype:ReoInputPrototype});
</script>