<template id="x-input-template">
	<style>
		td,input{
			font-size:1.1em;
		}
		input{
			width:100%;
			min-width:5em;
			text-align:right;
			border:1px solid lightgrey;
			padding: 2px;
		}
		input:invalid{
			color:red;
			background-color:lightyellow;
			border-style:solid;
			border-width:1px;
		}
		div{
			/*border:1px solid lightgrey;
			padding: 0 2px;
			margin:1px;*/
		}
		#error{
			display:none;
			margin:3px;
			color:darkred;
			background-color:lightyellow;
			//border: 1px solid red;
			//border-radius: 0.5em;			
		}
		#unit{
			width:4em;
		}
		table{
			border-spacing:0px;
			width:100%;
		}
		div:hover{
			background-color:#E6E6FF;
		}
		div{
			cursor:pointer;
			-webkit-user-select:none;
			border-radius:4px;
		}
	</style>
	<div>
		<table>
			<tr>
				<td id="name" colspan=3></td>
			</tr>
			<tr>
				<td id="notation" style="padding:0.5em 0;text-align:right;width:8em;"></td>
				<td style="padding-left:0.3em;text-align:right;"><input type="text" required/></td>
				<td id="unit"></td>
			</tr>
			<tr>
				<td id="error" colspan=3>
					<p>A long and convoluted error message to teach people things</p>
					<p>Another longer and convoluted error message to teach people things</p>
				</td>
			</tr>
		</table>
	</div>
</template>





<script id="x-input-script">
var XInputPrototype = Object.create(HTMLDivElement.prototype);
XInputPrototype.createdCallback = function(){
	this.create = function(){
		//import content from the template element
		var imported = document.querySelector("#x-input-template").innerHTML;
		this.webkitCreateShadowRoot();
		this.webkitShadowRoot.innerHTML = imported;
		
		// Add some event listeners and shit.
		this.input = this.webkitShadowRoot.querySelector("input");
		this.input.addEventListener("input",function(e){
			var evt = new Event("input")
			evt.target = this;
			this.dispatchEvent(evt);
		}.bind(this));
		
		this.webkitShadowRoot.querySelector("div").addEventListener("mousedown",function(e){
			if(e.target!=this.input){
				e.preventDefault();
				this.input.focus();
			}
		}.bind(this))
		
		this.isvalid = function(thisval){return true;};
		
		this.getAttributes();
		MathJax.Hub.Queue(["Typeset",MathJax.Hub,this.webkitShadowRoot]);
	}.bind(this);
	
	this.getAttributes = function(){
		for(var i=0; i<this.attributes.length;i++){
			var att = this.attributes[i];
			this[att.name] = att.value;
		}
	}.bind(this);
	// DEFINE VALUE PROPERTY GETTER SETTER
	Object.defineProperty(this,"value",{
		get:function(){
			return this.input.value;
		}.bind(this),
		set:function(newval){
			this.input.value = newval;
		}.bind(this)
	});
	
	
	
	Object.defineProperty(this,"valid",{
		get:function(){
			this.isvalid(this.value);
		}
	});
	
	
	
	Object.defineProperty(this,"varname",{
		get:function(){
			return this.webkitShadowRoot.querySelector("#name").innerHTML;
		},
		set:function(newval){
			this.webkitShadowRoot.querySelector("#name").innerHTML = newval;
		}
	});
	
	
	
	Object.defineProperty(this,"notation",{
		get:function(){
			return this.webkitShadowRoot.querySelector("#notation").innerHTML;
		},
		set:function(newval){
			this.webkitShadowRoot.querySelector("#notation").innerHTML = newval;
		}
	});
	
	Object.defineProperty(this,"unit",{
		get:function(){
			return this.webkitShadowRoot.querySelector("#unit").innerHTML;
		},
		set:function(newval){
			this.webkitShadowRoot.querySelector("#unit").innerHTML = newval;
		}
	});
	
	
	Object.defineProperty(this,"pattern",{
		get:function(){
			return this.input.pattern;
		},
		set:function(newval){
			this.input.pattern = newval;
		}
	});
	
	Object.defineProperty(this,"type",{
		get:function(){
			return this.input.type;
		},
		set:function(newval){
			this.input.type = newval;
		}
	});
	
	Object.defineProperty(this,"min",{
		get:function(){
			return this.input.min;
		},
		set:function(newval){
			this.input.min = newval;
		}
	});
	Object.defineProperty(this,"max",{
		get:function(){
			return this.input.max;
		},
		set:function(newval){
			this.input.max = newval;
		}
	});
	Object.defineProperty(this,"step",{
		get:function(){
			return this.input.step;
		},
		set:function(newval){
			this.input.step = newval;
		}
	});
	
	Object.defineProperty(this,"data-tooltip",{
		get:function(){
			return this.webkitShadowRoot.querySelector("div").getAttribute("data-tooltip");
		},
		set:function(newval){
			this.webkitShadowRoot.querySelector("div").setAttribute("data-tooltip",newval);
		}
	});
	
	this.create();
}
var XInput = document.registerElement("x-input",{prototype:XInputPrototype});

</script>