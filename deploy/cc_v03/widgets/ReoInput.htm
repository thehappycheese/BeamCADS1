<template id="ReoInputWidgetTemplate">
	<style>
		.spinbut{
			width:15px;
			height:11px;
			display:block;
			font-size:5px;
			margin:0px;
			padding:0px;
			text-align:center;
		}
		#barcode{
			text-align:right;
			width:3.6em;
			padding: 0 3px;
			font-weight:bold;
		}
		#barcode:enabled{
			color:darkblue;
		}
		#barcode:invalid{
			color:red;
			background-color: yellow;
		}
		
		#infobut{
			font-family:monospace;
			color:darkblue;
			width:2em;
			font-weight:bold;
		}
		#infobut:disabled{
			color:lightgrey;
			font-weight:regular;
		}
		#from:disabled, input:disabled{
			color:rgb(220, 220, 215);
			background-color:rgb(235, 235, 228);
		}
		
		input:invalid{
			color:red;
			background-color: yellow;
		}
		input[type=number]::-webkit-inner-spin-button,
		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
		div:hover{
			background-color:#E6E6FF;
		}
		div:hover #enabledtd{
			background-color:lightgreen;
		}
		div{
			cursor:pointer;
			-webkit-user-select:none;
		}
	</style>
	<div style="min-width:360px;max-width:500px;">
		<table id="rin" style="color:inherit;width:100%;" cellspacing=0>
			<tr>
				<td id="enabledtd" style="padding:0;">
					<input id="enabled" type="checkbox" data-tooltip="Enable/Disable Reo Layer."/>
				</td>
				<td style="text-align:right;">
					<input id="barcode" type="text" required pattern="(([1-2][0-9])|[2-9])N(10|12|16|20|24|28|32|36|40)" value="2N10" placeholder="eg. 2N10" data-tooltip="Number, Grade, Nominal Diameter. (This version only allows grade N)"/>
				</td>
				<td style="text-align:left;">
					<button tabindex="-1" class="spinbut" id="spinbutup"	data-tooltip="more"><!--&#9650;--></button>
					<button tabindex="-1" class="spinbut" id="spinbutdown"	data-tooltip="less"><!--&#9660;--></button>
				</td>
				<td id="asttd" style="text-align:left;">
					= <span id="ast">0000</span> mm&#178;
				</td>
				<td style="text-align:right;padding-left:0.5em;">
					<input id="offset" type="number" required min="0" max="10000" value="0" style="text-align:right;width:4em;" data-tooltip="Offset: Space between the bars of this layer and the next."/>
				</td>
				<td style="text-align:left;padding-left:0;">
					mm
				</td>
				<td style="text-align:right;padding-right:0;padding-left:0.5em;" >
					from
				</td>
				<td>
					<select id="from" data-tooltip="Where to offset this layer from.">
						<option value="top">top</option>
						<option value="highest">highest</option>
						<option value="lowest" selected>lowest</option>
						<option value="bottom">bottom</option>
					</select>
				</td>
				<td style="padding-left:0.5em;">
					<button id="infobut" data-tooltip="Add/Remove from summary table below.">&#8721;</button>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoInputWidgetScript">
	ReoInputPrototype = Object.create(HTMLDivElement.prototype);
	ReoInputPrototype.createdCallback = function(){
		
		
		this._selected = false;
		this._enabled = false;
		
		
		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoInputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			
			
			
			// ---------
			// PROPERTIES
			
			this.maindiv = this.doc.querySelector("div");
			this.enabledIn = this.doc.querySelector("#enabled");
			this.barcodeIn = this.doc.querySelector("#barcode");
			this.fromIn = this.doc.querySelector("#from");
			this.infobutIn = this.doc.querySelector("#infobut");
			this.offsetIn = this.doc.querySelector("#offset");
			this.spinbutup = this.doc.querySelector("#spinbutup");
			this.spinbutdown = this.doc.querySelector("#spinbutdown");
			
			
			this.selected = false;
			this.enabled = false;
			
			// -----------------------------------------------------
			// EVENT LISTENERS
			this.infobutIn.addEventListener("click",function(e){
				this.toggleSelected();
			}.bind(this));
			this.spinbutup.addEventListener("click",this.more);
			this.spinbutdown.addEventListener("click",this.less);
			
			this.fromIn.addEventListener("change",function(e){
				this.dispatchChangeEvent();
			}.bind(this));
			
			
		
			
			this.offsetoldval = this.offsetIn.value;
			this.offsetIn.addEventListener("keyup",function(e){
				if(this.offsetoldval!==this.offsetIn.value){
					this.offsetoldval = this.offsetIn.value;
					this.dispatchChangeEvent();
				}
			}.bind(this))
			

			
			this.enabledIn.addEventListener("change",function(){
				this.enabled = this.enabledIn.checked;
				console.log("change")
				this.dispatchChangeEvent();
			}.bind(this));
			
			this.barcodeIn.addEventListener("keydown",function(e){
				if(e.keyCode == 38){	// up button
					this.more();
					e.preventDefault();
				}
				if(e.keyCode == 40){	// down button
					this.less();
					e.preventDefault();
				}
			}.bind(this))
			
			this.barcodeIn.addEventListener("input",function(e){
				var val = e.target.value;
				var ss = e.target.selectionStart;
				var se = e.target.selectionEnd;
				var arr = val.split("")
				var flag = false;
				var noN = true;
				for(var i=0;i<arr.length;i++){
					
					if((/[^0-9nN]/).test(arr[i])){
						arr.splice(i--,1);
						;
						if(i<ss){
							ss--;
							se=ss;
						}
					}
					if(arr[i]=="N"){
						noN = false;
					}
				}
				val = arr.join("");
				val = val.toUpperCase();
				e.target.value =  val;
				e.target.setSelectionRange(ss,se);
			}.bind(this))
			
		}.bind(this);
		
		
		
		this.dispatchChangeEvent = function(){
			var e = new Event("change");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);
		
		
		
		
		
		
		
		
		
		
		
		Object.defineProperty(this,"enabled",{
			get:function(){
				return this._enabled;
			}.bind(this),
			set:function(newval){
				this._enabled = newval;
				if(newval == true){
					var e = new Event("enabled");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
				}else if(newval == false){
					var e = new Event("disabled");
					e.target = this;
					this.dispatchEvent(e);
					this.selected = false;
					//this.dispatchChangeEvent(); this will be dispatched as a result of the line above
				}
				this.enabledIn.checked = newval;
				var ins = this.doc.querySelectorAll("input, button, select")
				for(var i = 0; i < ins.length;i++){
					if(ins[i].id!="enabled"){
						ins[i].disabled=!newval;
					}
				}
			}.bind(this),
		});
		
		
		
		Object.defineProperty(this,"barcode",{
			get:function(){
				return this.barcodeIn.value;
			}.bind(this),
			set:function(newval){
				this.barcodeIn.value = newval;
			}.bind(this),
		});
		this.more = function(){
			var e = new Event("gimmemore");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);
		this.less = function(){
			var e = new Event("gimmeless");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);
		
		
		
		Object.defineProperty(this,"offset",{
			get:function(){
				return parseInt(this.offsetIn.value);
			}.bind(this),
			set:function(newval){
				this.offsetIn.value = Math.abs(Math.round(parseFloat(newval)));
			}.bind(this),
		});
		
		
		
		Object.defineProperty(this,"from",{
			get:function(){
				return this.fromIn.value;
			}.bind(this),
			set:function(newval){
				this.fromIn.value = newval;
			}.bind(this),
		});
		
		
		
		Object.defineProperty(this,"selected",{
			get:function(){
				return this._selected;
			}.bind(this),
			set:function(newval){
				if(!this._selected && newval){
					
					if(!this.enabled) return;
					
					this.maindiv.style.backgroundColor = "lightblue";
					this.infobutIn.innerHTML = "-";
					//this.infobutIn.style.fontWeight = "bold";
					var e = new Event("select");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
				}else if(!newval && this._selected){
					this.maindiv.style.backgroundColor = "";
					this.infobutIn.innerHTML = "&#8721;";
					//this.infobutIn.style.fontWeight = "";
					var e = new Event("unselect");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
				}
				this._selected = newval;
			}.bind(this),
		});
		
		
		
		
		this.toggleSelected = function(e){
			this.selected = !this.selected && this.enabled;
		}.bind(this);
		
		
		
		this.create();
	};
	
	
	
	var ReoInput = document.registerElement("reo-input",{prototype:ReoInputPrototype});
</script>