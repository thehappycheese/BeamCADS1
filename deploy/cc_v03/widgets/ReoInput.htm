<template id="ReoInputWidgetTemplate">
	<style>
		.spinbut{
			width:15px;
			height:11px;
			display:block;
			font-size:5px;
			margin:0px;
			padding:0px;
			text-align:center;
		}
		#barcode{
			text-align:right;
			width:3.6em;
			padding: 0 3px;
			font-weight:bold;
		}
		#barcode:enabled{
			color:darkblue;
		}
		#barcode:invalid{
			color:red;
			background-color: yellow;
		}
		
		#infobut{
			font-family:monospace;
			color:darkblue;
			width:2em;
			font-weight:bold;
		}
		#infobut:disabled{
			color:lightgrey;
			font-weight:regular;
		}
		#from:disabled, input:disabled{
			color:rgb(220, 220, 215);
			background-color:rgb(235, 235, 228);
		}
		
		input:invalid{
			color:red;
			background-color: yellow;
		}
		input[type=number]::-webkit-inner-spin-button,
		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}
		div:hover{
			background-color:#E6E6FF;
		}
		div:hover #enabledtd{
			border-radius:4px;
			background-color:lightgreen;
		}
		div{
			border-radius:4px;
			cursor:pointer;
			-webkit-user-select:none;
		}
	</style>
	<div style="min-width:360px;max-width:520px;color:grey;" data-tooltip="Click to include in summary table below">
		<table id="rin" style="color:inherit;width:100%;" cellspacing=0>
			<tr>
				<td id="enabledtd" style="padding:0;">
					<input id="enabled" type="checkbox" data-tooltip="Enable/Disable Reo Layer."/>
				</td>
				<td style="text-align:right;">
					<input id="barcode" type="text" required pattern="(([1-2][0-9])|[2-9])N(10|12|16|20|24|28|32|36|40)" value="2N10" placeholder="?N??"
							data-tooltip="Number of bars, Grade, Nominal Diameter. eg 3N24<br> Only N grade bars are allowed in this software.<br>Avaliable bar diameters are:<br>[10, 12, 16, 20, 24, 28, 32, 36, 40]mm"/>
				</td>
				<td style="text-align:left;">
					<button tabindex="-1" class="spinbut" id="spinbutup"	data-tooltip="more"><!--&#9650;--></button>
					<button tabindex="-1" class="spinbut" id="spinbutdown"	data-tooltip="less"><!--&#9660;--></button>
				</td>
				<td id="asttd" style="text-align:left;width:6em;"
						data-tooltip="Area calculated by multiplying the number of bars by the perscribed cross sectional areas defined in AS4671.">
					= <span id="area">0000</span> mm&#178;
				</td>
				<td style="text-align:right;padding-left:0.5em;">
					<input id="offset" type="number" required min="0" max="10000" value="0" style="text-align:right;width:4em;" data-tooltip="Offset: Space between the bars of this layer and the next."/>
				</td>
				<td style="text-align:left;padding-left:0;" id="mmlable">
					mm
				</td>
				<td style="text-align:right;padding-right:0;padding-left:0.5em;" id ="fromlable">
					from
				</td>
				<td>
					<select id="from" data-tooltip="Where to offset this layer from.">
						<!--<option value="top">top</option>-->
						<option value="highest">highest</option>
						<option value="lowest" selected>lowest</option>
						<!--<option value="bottom">bottom</option>-->
					</select>
				</td>
				<td style="padding-left:0.5em;">
					<button id="infobut" data-tooltip="Click to include in summary table below" style="width:1.8em;height:100%;line-height:100%;"></button>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoInputWidgetScript">
	ReoInputPrototype = Object.create(HTMLDivElement.prototype);
	ReoInputPrototype.createdCallback = function(){

		this._selected = false;
		this._enabled = false;
		
		// ##########################################################################################
		// 			DEFERED CONTRUCTOR
		// ##########################################################################################
		this.create = function(){
			
			
			// ##########################################################################################
			// 			CONSTRUCT SHADOW ROOT
			// ##########################################################################################
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoInputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			
			
			
			
			// ##########################################################################################
			// 			PROPERTIES
			// ##########################################################################################
			this.manager = this.parentElement;
			
			this.maindiv = this.doc.querySelector("div");
			this.enabledIn = this.doc.querySelector("#enabled");
			this.barcodeIn = this.doc.querySelector("#barcode");
			this.areaOut = this.doc.querySelector("#area");
			this.fromIn = this.doc.querySelector("#from");
			this.infobutIn = this.doc.querySelector("#infobut");
			this.offsetIn = this.doc.querySelector("#offset");
			this.spinbutup = this.doc.querySelector("#spinbutup");
			this.spinbutdown = this.doc.querySelector("#spinbutdown");
			
			// use these getter setters to initiate their respective side effects and styling
			this.selected = false;
			this.enabled = false;
			
			
			// ##########################################################################################
			// 			EVENT LISTENERS
			// ##########################################################################################
			// INFO BUTTON LISTENER
			this.infobutIn.addEventListener("click",function(e){
				if(this.enabled == false){
					this.enabled = true;
				}
				this.selected = !this.selected;
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			
			// "ROW" CLICK LISTENER
			this.webkitShadowRoot.addEventListener("click",function(e){
				switch(e.target.nodeName){
					case "INPUT":
					case "BUTTON":
					case "SELECT":
						break;
					default:
						if(this.enabled){
							this.selected = !this.selected;
						}
						this.update();
						this.dispatchChangeEvent();
				}
			}.bind(this));
			
			
			// MORE AND LESS BUTTONS
			this.spinbutup.addEventListener("click",function(){
				if(this.enabled == false){
					this.enabled = true;
				}
				this.more();
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			this.spinbutdown.addEventListener("click",function(){
				if(this.enabled == false){
					this.enabled = true;
				}
				this.less();
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			
			
			// "FROM" SELECTION INPUT LISTENER
			this.fromIn.addEventListener("change",function(e){
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			
			
			// "FROM" SELECTION INPUT LISTENER
			this.offsetoldval = this.offsetIn.value;
			this.offsetIn.addEventListener("keyup",function(e){
				if(this.offsetoldval!==this.offsetIn.value){
					this.offsetoldval = this.offsetIn.value;
					this.update();
					this.dispatchChangeEvent();
				}
			}.bind(this))
			
			
			// ENABLED CHACKBOX LISTENER
			this.enabledIn.addEventListener("change",function(){
				this.enabled = this.enabledIn.checked;
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			
			
			// BARCODE CHANGE EVENT LISTENERs
			this.barcodeIn.addEventListener("keydown",function(e){
				if(e.keyCode == 38){	// up button
					this.more();
					e.preventDefault();
					this.update();
					this.dispatchChangeEvent();
				}
				if(e.keyCode == 40){	// down button
					this.less();
					e.preventDefault();
					this.update();
					this.dispatchChangeEvent();
				}
			}.bind(this))
			this.barcodeIn.addEventListener("change",function(){
				this.update();
				this.dispatchChangeEvent();
			}.bind(this));
			this.barcodeIn.addEventListener("input",function(e){
				var val = e.target.value;
				var ss = e.target.selectionStart;
				var se = e.target.selectionEnd;
				var arr = val.split("")
				var flag = false;
				var noN = true;
				for(var i=0;i<arr.length;i++){
					
					if((/[^0-9nN]/).test(arr[i])){
						arr.splice(i--,1);
						;
						if(i<ss){
							ss--;
							se=ss;
						}
					}
					if(arr[i]=="N"){
						noN = false;
					}
				}
				val = arr.join("");
				val = val.toUpperCase();
				e.target.value =  val;
				e.target.setSelectionRange(ss,se);
				this.update();
				this.dispatchChangeEvent();
			}.bind(this))
			
		}.bind(this);//end create();
		
		// ##########################################################################################
		// 			DISPATCHCHANGEEVENT
		// ##########################################################################################
		
		this.dispatchChangeEvent = function(){
			//console.log("reo-input change")
			var e = new Event("change");
			e.target = this;
			e.bubbles = true;
			this.dispatchEvent(e);
		}.bind(this);
		
		// ##########################################################################################
		// 			UPDATE
		// ##########################################################################################
		
		this.update = function(){
			this.areaOut.innerHTML = this.area || "--";
			//console.log("reo-input update");
			var e = new Event("update");
			e.target = this;
			e.bubbles = true;
			this.dispatchEvent(e);
		}.bind(this);
		
		// ##########################################################################################
		// 			HELPER WHICH DISABLS A BUNCH OF FEATURES IN THIS ROW
		// ##########################################################################################
		
		this.makeFirstRow = function(){
			this.enabled = true;
			this.enabledIn.disabled = true;
			this.offsetIn.disabled = true;
			this.fromIn.disabled = true;
			this.offsetIn.style.visibility = "hidden";
			this.fromIn.style.visibility = "hidden";
			this.webkitShadowRoot.querySelector("#mmlable").style.visibility = "hidden";
			this.webkitShadowRoot.querySelector("#fromlable").style.visibility = "hidden";
		}.bind(this);
		
		// ##########################################################################################
		// 			GET/SET enabled
		// ##########################################################################################
		
		Object.defineProperty(this,"enabled",{
			get:function(){
				return this._enabled;
			}.bind(this),
			set:function(newval){
				this._enabled = newval;
				if(newval == true){
					this.webkitShadowRoot.querySelector("div").style.color = "";
				}else if(newval == false){
					this.webkitShadowRoot.querySelector("div").style.color = "grey";
					this.selected = false;
				}
				this.enabledIn.checked = newval;
				var ins = this.doc.querySelectorAll("input, select")
				for(var i = 0; i < ins.length;i++){
					if(ins[i].id!="enabled"){
						ins[i].disabled=!newval;
					}
				}
				this.update();
			}.bind(this),
		});
		
		// ##########################################################################################
		// 			GET/SET area
		// ##########################################################################################
		
		Object.defineProperty(this,"area",{
			get:function(){
				var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
				var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
				return areas[diameters.indexOf(this.diameter)]*this.number || undefined;
			}.bind(this)
		});
		
		
		// ##########################################################################################
		// 			GET/SET mass_per_meter
		// ##########################################################################################
		
		Object.defineProperty(this,"mass_per_meter",{
			get:function(){
				var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
				var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
				var masses		= [0.632,0.910,1.619,2.528,3.640,4.955,6.471,8.910,10.112];
				return masses[diameters.indexOf(this.diameter)]*this.number || undefined;
			}.bind(this)
		});
		
		// ##########################################################################################
		// 			GET/SET diameter
		// ##########################################################################################
		
		Object.defineProperty(this,"diameter",{
			get:function(){
				return parseInt(this.barcode.split("N")[1]) || undefined;
			}.bind(this),
			set:function(newval){
				var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
				if(diameters.indexOf(newval)!==-1){
					this.barcode = this.number + "N" + newval;
				}else{
					console.warn("Invalid assignment to reo-input diameter: "+newval);
				}
			}.bind(this)
		});
		
		// ##########################################################################################
		// 			GET/SET number
		// ##########################################################################################
		
		Object.defineProperty(this,"number",{
			get:function(){
				return parseInt(this.barcode.split("N")[0]);
			}.bind(this),
			set:function(newval){
				if(typeof newval == "number" && newval!==NaN && newval!==undefined && newval>=2 && newval<100){
					this.barcode = newval + "N" + this.diameter;
				}else{
					console.warn("Invalid assignment to reo-input number: "+newval);
				}
			}.bind(this)
		});
		
		// ##########################################################################################
		// 			GET/SET barcode
		// ##########################################################################################
		
		Object.defineProperty(this,"barcode",{
			get:function(){
				return this.barcodeIn.value;
			}.bind(this),
			set:function(newval){
				this.barcodeIn.value = newval;
				this.update();
			}.bind(this),
		});
		
		// ##########################################################################################
		// 			GET/SET offset
		// ##########################################################################################
		
		Object.defineProperty(this,"offset",{
			get:function(){
				return parseInt(this.offsetIn.value);
			}.bind(this),
			set:function(newval){
				this.offsetIn.value = Math.abs(Math.round(parseFloat(newval)));
				this.update();
			}.bind(this),
		});
		
		// ##########################################################################################
		// 			GET/SET from
		// ##########################################################################################
		
		Object.defineProperty(this,"from",{
			get:function(){
				return this.fromIn.value;
			}.bind(this),
			set:function(newval){
				this.fromIn.value = newval;
				this.update();
			}.bind(this),
		});
		
		// ##########################################################################################
		// 			GET/SET selected
		// ##########################################################################################
		
		Object.defineProperty(this,"selected",{
			get:function(){
				return this._selected;
			}.bind(this),
			set:function(newval){
				if(!this._selected && newval){
					this.maindiv.style.backgroundColor = "lightblue";
					this.infobutIn.innerHTML = "&#8721;";
					//this.infobutIn.style.fontWeight = "bold";
				}else if(!newval && this._selected){
					this.maindiv.style.backgroundColor = "";
					this.infobutIn.innerHTML = "";
					//this.infobutIn.style.fontWeight = "";
				}
				this._selected = newval;
				this.update();
			}.bind(this),
		});
		
		
		// ##########################################################################################
		// 			MORE AND LESS HELPER FUNCTIONS
		// ##########################################################################################
		
		this.more = function(){
			var b = parseInt(document.querySelector("#b").value);
			var D = parseInt(document.querySelector("#D").value);
			var df = parseInt(document.querySelector("#df").value);
			var cover = parseInt(document.querySelector("#cover").value);
			var fitwidth = b-2*cover-2*df;
			
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			
			var manager = this.parentElement;
			if(manager.getBottomRow()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
				// TODO: assume minimum spacing of 20mm between
				// TODO: assume maximum spacing of 300mm c-c
				// TODO: assume maximum of 10 bars
				this.barcode = this._more_less_barcode(true, 10, 300, 20, fitwidth, this.area) || this.barcode;
			}else{
				// TODO: assume maximum of 2 bars
				this.barcode = this._more_less_barcode(true, 2,  300, 20, fitwidth, this.area) || this.barcode;
			}
		}.bind(this);
		
		
		
		
		this.less = function(){
			var b = parseInt(document.querySelector("#b").value);
			var D = parseInt(document.querySelector("#D").value);
			var df = parseInt(document.querySelector("#df").value);
			var cover = parseInt(document.querySelector("#cover").value);
			var fitwidth = b-2*cover-2*df;
			
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			
			var manager = this.parentElement;
			if(manager.getBottomRow()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
				// TODO: assume minimum spacing of 20mm between
				// TODO: assume maximum spacing of 300mm c-c
				// TODO: assume maximum of 10 bars
				this.barcode = this._more_less_barcode(false, 10, 300, 20, fitwidth, this.area) || this.barcode;
			}else{
				// TODO: assume maximum of 2 bars
				this.barcode = this._more_less_barcode(false, 2,  300, 20, fitwidth, this.area) || this.barcode;
			}
		}.bind(this);
		
		
		
		this._more_less_barcode = function (getmore, maxbar, max_spacing, min_gap, fitwidth, current_area){
		
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			
			
			var combs = [];
			var num,dia,diai,minw,maxw;
			for(num = 2; num<=maxbar;num++){
				for(diai=0;diai<diameters.length;diai++){
					dia = diameters[diai];
					
					minw = dia*num+(num-1)*min_gap;
					maxw = dia*num+(num-1)*max_spacing;
					if(fitwidth>=minw && fitwidth<=maxw){
						combs.push({number:num, diameter:dia, area:areas[diai]*num})
					}
				}
			}
			
			combs.sort(function(a,b){
				if(getmore){
					return a.area-b.area;
				}else{
					return b.area-a.area;
				}
			})
			
			for(var i = 0;i<combs.length;i++){
				if(getmore){
					if(combs[i].area>current_area){
						if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i+1].area-combs[i].area<50){
							i++;
							if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i+1].area-combs[i].area<10){
								i++;
							}
						}
						return combs[i].number+"N"+combs[i].diameter;
					}
				}else{
					if(combs[i].area<current_area){
						if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i].area-combs[i+1].area<50){
							i++;
							if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i].area-combs[i+1].area<10){
								i++;
							}
						}
						return combs[i].number+"N"+combs[i].diameter;
					}
				}
			}
		
		}.bind(this);// end _more_less_barcode
		
		
		
		
		this.create();
	};
	
	
	
	var ReoInput = document.registerElement("reo-input",{prototype:ReoInputPrototype});
</script>