<template id="reoManagerTemplate"></template>
<script id="reoManagerScript">
	ReoManagerPrototype = Object.create(HTMLDivElement.prototype);
	ReoManagerPrototype.createdCallback = function(){

		this.rows = [];
		
		this.create = function(){
			var firstrow = this.createReoInput();
			firstrow.makeFirstRow();
			this.rows.push(this.createReoInput());
			this.rows.push(this.createReoInput());
			this.rows.push(this.createReoInput());
			this.rows.push(firstrow);
			
			
			for(var i = 0;i<this.rows.length;i++){
				this.appendChild(this.rows[i]);
			}
			
			this.update();
		}.bind(this);
		
		
		
		
		
		
		this.getEnabledSelectedRows = function(){
			var result = [];
			for(var i = 0;i<this.rows.length;i++){
				if(this.rows[i].enabled && this.rows[i].selected){
					result.push(this.rows[i]);
				}
			}
			return result;
		}.bind(this);
		
		
		
		this.getEnabledRows = function(){
			var result = [];
			for(var i = 0;i<this.rows.length;i++){
				if(this.rows[i].enabled){
					result.push(this.rows[i]);
				}
			}
			return result;
		}.bind(this);
		
		
		this.getTopmostTop = function(){
			var r = this.getEnabledRows();
			for(var i = 0;i<r.length;i++){
				// TODO: finish this and swim through the mire that is determining the order and fit of the bars.
				// LEFTOFF: 2014 04 16 23:25
			}
		}.bind(this);
		
		
		
		this.getBottomRow = function(){
			var r = this.getEnabledRows();
			return r[r.length-1];
		}.bind(this);
		this.getTopRow = function(){
			var r = this.getEnabledRows();
			return r[0];
		}.bind(this);
		
		
		
		this.getDepthOfRow = function(row){
			
			var D =		parseInt(document.querySelector("#D").value);
			var cover =	parseInt(document.querySelector("#cover").value);
			var df =		parseInt(document.querySelector("#df").value);
			
			var rs = this.getEnabledRows();
			var br = this.getBottomRow();
			
			var last_low_depth = D-cover-df;
			var last_high_depth = cover+df;
			
			for(var i = rs.length-1;i>=0;i--){
				if(rs[i].from === "lowest"){
					if(rs[i] === row){
						return last_low_depth - rs[i].offset - rs[i].diameter/2;
					}else{
						last_low_depth -= rs[i].offset + rs[i].diameter;
					}
				}
			}
			for(var i = 0; i<rs.length-1; i--){
				if(rs[i].from === "highest"){
					if(rs[i] === row){
						return last_high_depth + rs[i].offset + rs[i].diameter/2;
					}else{
						last_high_depth += rs[i].offset + rs[i].diameter;
					}
				}
			}
		}.bind(this);
		
		
		
		
		
		
		
		
		
		this.createReoInput = function(){
			var nr = new ReoInput();
			nr.addEventListener("update",this.update);
			nr.addEventListener("change",this.change);
			return nr;
		}.bind(this);
		
		
		
		
		
		this.change = function(e){
			// TODO: ??
			//console.log("reo-manager change");
		}
		
		
		this.update = function(e){
			//console.log("reo-manager update");
			var e = new Event("update");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);
		
		
		
		this.adjustLength = function(){
			if(this.rows.length==1){
				this.rows.unshift(this.createReoInput())
			}
			while(!this.rows[0].enabled && this.rows.length>2 && !this.rows[1].enabled){
				this.removeChild(this.rows.shift());
			}
			for(var i=0;i<this.rows.length;i++){
				if(i==0 && this.rows[i].enabled){
					this.rows.unshift(this.createReoInput())
				}
				// Insert inbetween behaviour
				if(this.rows[i+1] && this.rows[i+1].enabled && this.rows[i].enabled && this.rows[i].from!=this.rows[i+1].from){
					//this.rows.splice(i+1,0,this.createReoInput());
					//i++;
				}
				// remove double blanks
				if(this.rows[i+1] && !this.rows[i+1].enabled && !this.rows[i].enabled){
					//this.removeChild(this.rows[i]);
					//this.rows.splice(i,1);
					//i--;
				}
			}
		}.bind(this);
		
		
		
		
		
		
		
		
		
		Object.defineProperty(this,"value",{
			get:function(){
				var result = [];
				var rs = this.getEnabledRows(); 
				var rw;
				for(var i = 0;i<rs.length;i++){
					rw = {
						number:		rs[i].number,
						diameter:	rs[i].diameter,
						area:		rs[i].area,
						depth:		this.getDepthOfRow(rs[i])
					}
					result.push(rw);
				}
				return result;
				
			},
			set:function(newval){
				// TODO: DESERIELIZEEEE :|
			}
		});
		
		
		
		
		
		

		this.create();
	};
	
	
	
	window.ReoManager = document.registerElement("reo-manager",{prototype:ReoManagerPrototype});
</script>
