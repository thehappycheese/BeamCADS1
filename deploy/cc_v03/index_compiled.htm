


<!--#########		 Crawling:.\index.htm		#########-->
	<html>
<head>
	<link rel="stylesheet" href="index.css" type="text/css"/>
	<script type="text/x-mathjax-config">

		MathJax.Hub.Config({
			extensions: ["tex2jax.js"],
			jax: ["input/TeX","output/HTML-CSS"],
			tex2jax: {inlineMath: [["$$","$$"],["$$$","$$$"]]},
			messageStyle: "none"
		});
	</script>
	<script type="text/javascript" src="../jslib/mathjax/MathJax.js"></script>
	<title> - BeamCAD - </title>
</head>
<body>
	<div id="apptitlebox" class="bmpblock">
		<div>BeamCAD v0.3</div>
		<div><a target="_blank" href="task/index.htm">1. Task	</a></div>
		<div><a target="_blank" href="https://www.surveymonkey.com/s/FBLMLHG">2. Survey	</a></div>
	</div>
	<div style="display:flex;flex-wrap:wrap;">
		<div id="invardiv" class="bmpblock">
			<!-- TODO: fix the pattern mathcing here-->
			<x-input	id="Ln"		
						notation ="$$$L_n$$$" 
						unit="mm"
						value="1000"
						type="number"
						min="1000"
						max="50000"
						step="100"></x-input>
			<x-input	id="b"
						notation ="$$$b$$$"
						unit="mm"
						value="300"
						type="number"
						min="200"
						max="5000"
						step="10"></x-input>
			<x-input	id="D"
						notation ="$$$D$$$"
						unit="mm"
						value="600"
						type="number"
						min="200"
						max="3000"
						data-tooltip="Total depth (vertical height) of beam from top to bottom surface"></x-input>
			<x-input	id="cover"
						notation ="$$$\text{Cover}$$$"
						unit="mm"
						value="25"
						type="number"
						min="20"
						max="100"
						step="5"
						data-tooltip="Distance from the outer surface of concrete to the reo bars"></x-input>
			<x-input	id="$$$\text{eclass}$$$"
						notation ="E-Class"
						value="A"
						pattern="(A|B|C|D)"
						data-tooltip="Exposure Classification determined by exposure to natural environment. Use A | B | C | D"></x-input>
			<x-input	id="df"
						notation="$$$d_f$$$"
						unit="mm"
						value="10"
						data-tooltip="Diameter of figment bars which from the reo 'ribcage'"></x-input> 
			<x-input	id="rhoc"
						notation="$$$\rho_c$$$"
						unit="kg/m^3"
						value="2400"
						type="number"
						min="2100"
						max="2800"
						step="10"
						data-tooltip="Concrete Density"></x-input>
			<x-input	id="fc"
						notation="$$$f'_c$$$"
						unit="MPa"
						value="32"
						pattern="(20|25|32|40|50|65|80|100)"
						data-tooltip="Concrete Strength"></x-input>
		</div>
		<div id="varinfodiv" class="bmpblock" >
			<table style="width:100%;height:350px;padding:0;">
				<tr id="errortr" style="height:8em;display:none" >
					<td id="errortd" style="padding:5px;">Error:</td>
				</tr>
				<tr>
					<td>
						<iframe id="varinfoiframe" src="infos/index.htm" style="border:none;width:100%;height:100%;"></iframe>
					</td>
				</tr>
			</table>
		</div>
	</div>
	<div style="display:flex;flex-wrap:wrap;justify-content:center;">
		<div id="reoinputoutputdiv" class="bmpblock">
			<!--<div id="reocontroldiv"></div>-->
			<div id="reoinputdiv">
				<reo-manager></reo-manager>
			</div>
			<div style="width:100%;"></div>
			<div id="reooutputdiv">
				<reo-output></reo-output>
			</div>
		</div>
		<div id="crosssectiondiv" class="bmpblock" style="display:flex;flex-wrap:wrap;">
			<h1 style="display:block;width:100%">Cross Section</h1>
			<div style="width:100%;display:flex;justify-content:space-around;">
				<canvas id="crosssectioncanvas" style="background-color:black;"></canvas>
			</div>
		</div>
		<div id="elevationdiv" class="bmpblock" style="display:flex;flex-wrap:wrap;">
			<h1 style="display:block;width:100%">Elevation</h1>
			<div style="width:100%;">
				<canvas id="elevationcanvas" style="background-color:black;"></canvas>
			</div>
		</div>
	</div>
	<div style="min-height:300px;margin-bottom:40px;" class="bmpblock">
		<h1>Calculation Div</h1>
	</div>
	<div id="tooltipbar">
		Pro-tips bar
	</div>
</body>
<script>
	//###########################################################################################
	//###### Canvas resize events ###############################################################
	//###########################################################################################
	window.addEventListener("resize",handleResize);
	setTimeout(handleResize,500);
	setTimeout(handleResize,1500);
	setTimeout(handleResize,5000);

	function handleResize(e){
		var c=document.querySelector("#crosssectioncanvas");
		var st=window.getComputedStyle(c.parentElement);
		c.width = Math.min(500,parseInt(st.width));
		c.height = 300;
		var c=document.querySelector("#elevationcanvas");
		var st=window.getComputedStyle(c.parentElement);
		c.width = parseInt(st.width);
		c.height = 150;
		// TODO: Update drawing
	}

	//###########################################################################################
	//###### Reo input/output helpers ###########################################################
	//###########################################################################################

	function setErrorList(list){

		if(list===undefined || list.length==0){
			document.querySelector("#errortr").style.display="none";

		}else{
			document.querySelector("#errortr").style.display="";
			var out = '<h1 style="color:darkred;">Error</h1>'

			for(var i = 0;i<list.length;i++){
				out+="<p>"+list[i]+"</p>";
			}

			document.querySelector("#errortd").innerHTML = out;
		}

	}

	//##################################################################3
	//##### Tooltips ###################################################3
	//##################################################################3

	setTimeout(function(){
		addTooltipTo(document.body);
	},5000);

	function addTooltipTo(d){
		var els = d.querySelectorAll("*");

		for(var i = 0;i<els.length;i++){

			if(els[i].webkitShadowRoot!=null){
				addTooltipTo(els[i].webkitShadowRoot);
				//console.log(els[i]);

			}else if(els[i].getAttribute("data-tooltip")){

				els[i].addEventListener("mouseover",function(e){
					var targ = e.target; 

					while(targ.getAttribute("data-tooltip")===null){
						targ=targ.parentNode;
					}

					var ttb = document.querySelector("#tooltipbar")
					ttb.innerHTML = "Pro-tip: "+targ.getAttribute("data-tooltip");
				});

				els[i].addEventListener("mouseout",function(e){
					var ttb = document.querySelector("#tooltipbar")
					ttb.innerHTML = "";
				});
			}

		}

	}

	//##########################################################
	//#### Contextual Help View ################################
	//##########################################################

	(function(){
		var xins = document.querySelectorAll("x-input");

		for(i=0;i<xins.length;i++){

			xins[i].addEventListener("mousedown",function(e){
				setHelpLoc("infos/"+e.target.id+".htm");
			})
		}

	})()

	function setHelpLoc(url){

		if(document.querySelector("#varinfoiframe").getAttribute("src") != url){
			document.querySelector("#varinfoiframe").contentWindow.location.replace(url);
		}

	}


	document.querySelector("#varinfoiframe").addEventListener("load",function(e){

		if(e.target.contentDocument.querySelector("meta")!=null){
			e.target.contentWindow.location.replace("infos/404.htm");
		}

	});
	var ifrm = document.querySelector("#varinfoiframe");
</script>
 <script data-root="" data-main="cc_v03/main.js" src="../jslib/nickRequire.js"></script>
<script>



// #########		 Crawling:.\main.js		#########



// #########		 Crawling:.\ReoLayer.js		#########

function ReoLayer(parentbeam,barcode){
	this.parentbeam = parentbeam;
	this.number		= undefined;
	this.diameter	= undefined;
	this.offset		= undefined;
	this.bartype	= "N";
	this.from		= undefined;
	this.diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
	this.areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];

	Object.defineProperty(this,"area",{get:function(){
		return this.number * this.areas[this.diameters.indexOf(this.diameter)];
	}.bind(this)})

	this.setBarcode = function(barcode){
		var bs = barcode.split("N");
		this.diameter = parseInt(bs[1]);
		this.number = parseInt(bs[0]);
	}.bind(this);

	this.getBarCode = function(){
		return this.number + this.bartype + this.diameter;
	}.bind(this);

	this.isValid = function(){
		// TODO: validate this object
		return typeof this.offset == "number"
				&& !isNaN(this.area)
				&& (this.from=="top" || this.from=="bottom" || this.from=="highest" || this.from=="lowest");
	}.bind(this);

	this.getDepth = function(){

		switch(this.from){
			case "top":
				return this.offset;
			case "bottom":
				return this.parentbeam.D-this.offset;
			case "lowest":
				return this.parentbeam.D-this.parentbeam.cover - this.parentbeam.dfitments - this.offset - this.diameter/2;
			case "highest":
				return this.parentbeam.cover + this.parentbeam.dfitments + this.offset + this.diameter/2-1;
			default:
				throw new Error("Can't get depth: this.from is not correct.");
		}

		return undefined;
	}.bind(this);

	this.setFromArea = function (a,moreless){
		// TODO: subject this function to further testing
		var result = []
		var fitwidth = this.parentbeam.getFitWidth();
		// AS4671 Table 5A in section 7
		var ndia = [10,	12,		16,		20,		24,		28,		32,		36,		40];
		var area = [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
		// Search for a bunch of solutions that will get more than or equal to required area 'a':
		var n, d;

		for(d = area.length-1; d>=0; d--){

			switch(moreless){
				case "less":
					n = Math.max(this.parentbeam.minnumberofbars,Math.floor(a/area[d]));
					break
				case "more":
				default:
					n = Math.max(this.parentbeam.minnumberofbars,Math.ceil(a/area[d]));
			}


			if(n<this.parentbeam.maxnumberofbars && ndia[d]*n+this.parentbeam.minbarspacing*(n-1)<fitwidth){
				// There are not too many bars, and the number of bars fits within the required width
				result.push({number:n,diameter:ndia[d],area:area[d]*n});
			}

		}

		// Sort by area

		result.sort(function(a,b){
			// 50mm^2 is median difference in the available areas for less than 10 bars
			// If the difference between areas is less than 50 and the number of bars is less, reverse the sort decision
			var diff = Math.abs(a.area-b.area);

			if(a.area<b.area){
				// TODO: fix up this sorting thing. Sorting by area seems to be just fine.
				if(diff<20 && b.number<a.number) return 1;
				return -1;

			}else{
				if(diff<20 && a.number<b.number)	return -1;
				return 1;
			}

		});
		this.diameter	= result[0].diameter;
		this.number		= result[0].number;
	}.bind(this);

	this.morethan = function(a){
		this.setFromArea(a||this.area+1||1, "more");
	}.bind(this);

	this.lessthan = function(a){
		this.setFromArea(a||this.area-1||1, "less");
	}.bind(this);
	if(barcode)	this.setBarcode(barcode);
}



// #########		 Crawling:.\widgets\widgets.js		#########

// ####### remainder of .\widgets\widgets.js has not been imported ########
</script>




<!--#########		 Crawling:.\widgets\ReoInput.htm		#########-->
<template id="ReoInputWidgetTemplate">
	<style>

		.spinbut{
			width:15px;
			height:11px;
			display:block;
			font-size:5px;
			margin:0px;
			padding:0px;
			text-align:center;
		}


		#barcode{
			text-align:right;
			width:3.6em;
			padding: 0 3px;
			font-weight:bold;
		}


		#barcode:enabled{
			color:darkblue;
		}


		#barcode:invalid{
			color:red;
			background-color: yellow;
		}


		#infobut{
			font-family:monospace;
			color:darkblue;
			width:2em;
			font-weight:bold;
		}


		#infobut:disabled{
			color:lightgrey;
			font-weight:regular;
		}


		#from:disabled, input:disabled{
			color:rgb(220, 220, 215);
			background-color:rgb(235, 235, 228);
		}


		input:invalid{
			color:red;
			background-color: yellow;
		}

		input[type=number]::-webkit-inner-spin-button,

		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}


		div:hover{
			background-color:#E6E6FF;
		}


		div:hover #enabledtd{
			background-color:lightgreen;
		}


		div{
			cursor:pointer;
			-webkit-user-select:none;
		}

	</style>
	<div style="min-width:360px;max-width:500px;">
		<table id="rin" style="color:inherit;width:100%;" cellspacing=0>
			<tr>
				<td id="enabledtd" rowspan=1 style="padding:0;">
					<input id="enabled" type="checkbox" data-tooltip="Enable/Disable Reo Layer."/>
				</td>
				<td style="text-align:right;">
					<input id="barcode" type="text" required pattern="(([1-2][0-9])|[2-9])N(10|12|16|20|24|28|32|36|40)" value="2N10" placeholder="eg. 2N10" data-tooltip="Number, Grade, Nominal Diameter. (This version only allows grade N)"/>
				</td>
				<td style="text-align:left;">
					<button tabindex="-1" class="spinbut" id="spinbutup"	data-tooltip="more"><!--&#9650;--></button>
					<button tabindex="-1" class="spinbut" id="spinbutdown"	data-tooltip="less"><!--&#9660;--></button>
				</td>
				<td style="text-align:right;padding-left:0.5em;">
					<input id="offset" type="number" required min="0" max="10000" value="0" style="text-align:right;width:4em;" data-tooltip="Offset: Space between the bars of this layer and the next."/>
				</td>
				<td style="text-align:left;padding-left:0;">
					mm
				</td>
				<td style="text-align:right;padding-right:0;padding-left:0.5em;" >
					from
				</td>
				<td>
					<select id="from" data-tooltip="Where to offset this layer from.">
						<option value="top">top</option>
						<option value="highest">highest</option>
						<option value="lowest" selected>lowest</option>
						<option value="bottom">bottom</option>
					</select>
				</td>
				<td style="padding-left:0.5em;">
					<button id="infobut" data-tooltip="Add/Remove from summary table below.">&#8721;</button>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoInputWidgetScript">
	ReoInputPrototype = Object.create(HTMLDivElement.prototype);

	ReoInputPrototype.createdCallback = function(){
		this._selected = false;
		this._enabled = false;

		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoInputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			// ---------
			// PROPERTIES
			this.maindiv = this.doc.querySelector("div");
			this.enabledIn = this.doc.querySelector("#enabled");
			this.barcodeIn = this.doc.querySelector("#barcode");
			this.fromIn = this.doc.querySelector("#from");
			this.infobutIn = this.doc.querySelector("#infobut");
			this.offsetIn = this.doc.querySelector("#offset");
			this.spinbutup = this.doc.querySelector("#spinbutup");
			this.spinbutdown = this.doc.querySelector("#spinbutdown");
			this.selected = false;
			this.enabled = false;
			// -----------------------------------------------------
			// EVENT LISTENERS

			this.infobutIn.addEventListener("click",function(e){
				this.toggleSelected();
			}.bind(this));
			this.spinbutup.addEventListener("click",this.more);
			this.spinbutdown.addEventListener("click",this.less);

			this.fromIn.addEventListener("change",function(e){
				this.dispatchChangeEvent();
			}.bind(this));
			this.offsetoldval = this.offsetIn.value;

			this.offsetIn.addEventListener("keyup",function(e){

				if(this.offsetoldval!==this.offsetIn.value){
					this.offsetoldval = this.offsetIn.value;
					this.dispatchChangeEvent();
				}

			}.bind(this))

			this.enabledIn.addEventListener("change",function(){
				this.enabled = this.enabledIn.checked;
				console.log("change")
				this.dispatchChangeEvent();
			}.bind(this));

			this.barcodeIn.addEventListener("keydown",function(e){
				if(e.keyCode == 38){	// up button
					this.more();
					e.preventDefault();
				}

				if(e.keyCode == 40){	// down button
					this.less();
					e.preventDefault();
				}

			}.bind(this))

			this.barcodeIn.addEventListener("input",function(e){
				var val = e.target.value;
				var ss = e.target.selectionStart;
				var se = e.target.selectionEnd;
				var arr = val.split("")
				var flag = false;
				var noN = true;

				for(var i=0;i<arr.length;i++){

					if((/[^0-9nN]/).test(arr[i])){
						arr.splice(i--,1);
						;

						if(i<ss){
							ss--;
							se=ss;
						}

					}


					if(arr[i]=="N"){
						noN = false;
					}

				}

				val = arr.join("");
				val = val.toUpperCase();
				e.target.value =  val;
				e.target.setSelectionRange(ss,se);
			}.bind(this))
		}.bind(this);

		this.dispatchChangeEvent = function(){
			var e = new Event("change");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		Object.defineProperty(this,"enabled",{

			get:function(){
				return this._enabled;
			}.bind(this),

			set:function(newval){
				this._enabled = newval;

				if(newval == true){
					var e = new Event("enabled");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();

				}else if(newval == false){
					var e = new Event("disabled");
					e.target = this;
					this.dispatchEvent(e);
					this.selected = false;
					//this.dispatchChangeEvent(); this will be dispatched as a result of the line above
				}

				this.enabledIn.checked = newval;
				var ins = this.doc.querySelectorAll("input, button, select")

				for(var i = 0; i < ins.length;i++){

					if(ins[i].id!="enabled"){
						ins[i].disabled=!newval;
					}

				}

			}.bind(this),
		});

		Object.defineProperty(this,"barcode",{

			get:function(){
				return this.barcodeIn.value;
			}.bind(this),

			set:function(newval){
				this.barcodeIn.value = newval;
			}.bind(this),
		});

		this.more = function(){
			var e = new Event("gimmemore");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		this.less = function(){
			var e = new Event("gimmeless");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		Object.defineProperty(this,"offset",{

			get:function(){
				return parseInt(this.offsetIn.value);
			}.bind(this),

			set:function(newval){
				this.offsetIn.value = Math.abs(Math.round(parseFloat(newval)));
			}.bind(this),
		});

		Object.defineProperty(this,"from",{

			get:function(){
				return this.fromIn.value;
			}.bind(this),

			set:function(newval){
				this.fromIn.value = newval;
			}.bind(this),
		});

		Object.defineProperty(this,"selected",{

			get:function(){
				return this._selected;
			}.bind(this),

			set:function(newval){

				if(!this._selected && newval){
					if(!this.enabled) return;
					this.maindiv.style.backgroundColor = "lightblue";
					this.infobutIn.innerHTML = "-";
					//this.infobutIn.style.fontWeight = "bold";
					var e = new Event("select");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();

				}else if(!newval && this._selected){
					this.maindiv.style.backgroundColor = "";
					this.infobutIn.innerHTML = "&#8721;";
					//this.infobutIn.style.fontWeight = "";
					var e = new Event("unselect");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
				}

				this._selected = newval;
			}.bind(this),
		});

		this.toggleSelected = function(e){
			this.selected = !this.selected && this.enabled;
		}.bind(this);
		this.create();
	};
	var ReoInput = document.registerElement("reo-input",{prototype:ReoInputPrototype});
</script>


<!--#########		 Crawling:.\widgets\ReoManager.htm		#########-->
<template id="reoManagerTemplate"></template>
<script id="reoManagerScript">
	ReoManagerPrototype = Object.create(HTMLDivElement.prototype);

	ReoManagerPrototype.createdCallback = function(){
		this.rows = [];

		this.create = function(){
			var firstrow = this.createReoInput();
			firstrow.enabled = true;
			firstrow.enabledIn.disabled = true;
			firstrow.offsetIn.disabled = true;
			firstrow.fromIn.disabled = true;
			this.rows.push(this.createReoInput());
			this.rows.push(this.createReoInput());
			this.rows.push(firstrow);

			for(var i = 0;i<this.rows.length;i++){
				this.appendChild(this.rows[i]);
			}

			this.update();
		}.bind(this);

		this.getEnabledSelectedRows = function(){
			var result = [];

			for(var i = 0;i<this.rows.length;i++){

				if(this.rows[i].enabled && this.rows[i].selected){
					result.push(this.rows[i]);
				}

			}

			return result;
		}.bind(this);

		this.getEnabledRows = function(){
			var result = [];

			for(var i = 0;i<this.rows.length;i++){

				if(this.rows[i].enabled){
					result.push(this.rows[i]);
				}

			}

			return result;
		}.bind(this);

		this.getBottomRow = function(){
			return this.rows[this.rows.length-1];
		}.bind(this);

		this.getDepthOfRow = function(row){
			var br = this.getBottomRow();
			var bottomDepth = D-cover-df-br.diameter/2;

			for(var i = rows.length-2;i>=0;i--){
			}

			// TODO: get the depth of the bottom row
		}.bind(this);

		this.createReoInput = function(){
			var nr = new ReoInput();
			nr.addEventListener("change",this.update);
			return nr;
		}.bind(this);

		this.update = function(){
			var e = new Event("update");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		this.adjustLength = function(){

			if(this.rows.length==1){
				this.rows.unshift(this.createReoInput())
			}


			while(!this.rows[0].enabled && this.rows.length>2 && !this.rows[1].enabled){
				this.removeChild(this.rows.shift());
			}


			for(var i=0;i<this.rows.length;i++){

				if(i==0 && this.rows[i].enabled){
					this.rows.unshift(this.createReoInput())
				}

				// Insert inbetween behaviour

				if(this.rows[i+1] && this.rows[i+1].enabled && this.rows[i].enabled && this.rows[i].from!=this.rows[i+1].from){
					//this.rows.splice(i+1,0,this.createReoInput());
					//i++;
				}

				// remove double blanks

				if(this.rows[i+1] && !this.rows[i+1].enabled && !this.rows[i].enabled){
					//this.removeChild(this.rows[i]);
					//this.rows.splice(i,1);
					//i--;
				}

			}

		}.bind(this);
		this.create();
	};
	window.ReoManager = document.registerElement("reo-manager",{prototype:ReoManagerPrototype});
</script>



<!--#########		 Crawling:.\widgets\ReoOutput.htm		#########-->
<template id="ReoOutputWidgetTemplate">
	<style>

		#rout td{
			border-bottom:1px solid lightgrey;
		}


		.tableout{
			color:darkblue;
			text-align:right;
			font-family:sans-serif;
			padding-right:0;
			min-width:50px;
			font-size:90%;
			padding-right:0.5em;
		}

	</style>
	<div style="min-width:315px;max-width:500px;">
		<table id="rout" style="width:100%" cellspacing=0>
			<tr data-tooltip="Depth measured from top surface of beam to centroid of layer[s].">
				<td id="depthlable">Depth from top surface:</td>
				<td class="tableout" id="depth">1200</td>
				<td>mm</td>
			</tr>
			<tr data-tooltip="Cross-sectional area of reo-bar layer[s]">
				<td id="arealable">Cross-sectional area of steel:</td>
				<td id="area" class="tableout">30000</td>
				<td>mm&#178;</td>
			</tr>
			<tr>
				<td id="amountlable" rowspan=4>Amount:</td>
				<td id="nbars" class="tableout" data-tooltip="Number of reo bars in layer[s]">10</td>
				<td>bars</td>
			</tr>
			<tr>
				<td id="length" class="tableout" data-tooltip="Total length of reo bars based on clear span L_n with no overlap">10</td>
				<td>m</td>
			</tr>
			<tr>
				<td id="masspermeter" class="tableout" data-tooltip="Total mass/meter of layer[s]">5</td>
				<td>kg/m</td>
			</tr>
			<tr>
				<td id="mass" class="tableout" data-tooltip="Total mass of layer[s]">400</td>
				<td>kg</td>
			</tr>
			<tr data-tooltip="Total tensile force in layer[s]. Compressive force is shown negative." >
				<td id="tforcelable" style="border-bottom:none;">Layer Tension Force:</td>
				<td id="tforce" style="border-bottom:none;"  class="tableout">200</td>
				<td style="border-bottom:none;" >kN</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoOutputWidgetScript">
	ReoOutputPrototype = Object.create(HTMLDivElement.prototype);

	ReoOutputPrototype.createdCallback = function(){

		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoOutputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			this.oneLables();
			this.blank();
		}.bind(this);

		this.setIdContent=function(id, content){
			var elem = this.webkitShadowRoot.querySelector("#"+id);

			if(elem!=null){
				elem.innerHTML = content;

			}else{
				throw new Error("ReoOutput: No id of: "+id);
			}

		}.bind(this);

		this.oneLables = function(){
			this.setIdContent("depthlable",		"Depth to layer:");
			this.setIdContent("arealable",		"Layer Cross-sectional Area:");
			this.setIdContent("amountlable",	"Amount:");
			this.setIdContent("tforcelable",	"Layer Tension Force:");
		}.bind(this);

		this.avgLables = function(){
			this.setIdContent("depthlable",		"Depth to <i>centroid</i>:");
			this.setIdContent("arealable",		"&#8721; Cross-sectional Area:");
			this.setIdContent("amountlable",	"&#8721; Amount:");
			this.setIdContent("tforcelable",	"&#8721; Tension Force:");
		}


		this.blank = function(){
			this.setIdContent("depth",			"--");
			this.setIdContent("area",			"--");
			this.setIdContent("nbars",			"--");
			this.setIdContent("length",			"--");
			this.setIdContent("masspermeter",	"--");
			this.setIdContent("mass",			"--");
			this.setIdContent("tforce",			"--");
		}

		this.create();
	};
	var ReoOutput = document.registerElement("reo-output",{prototype:ReoOutputPrototype});
</script>


<!--#########		 Crawling:.\widgets\XInput.htm		#########-->
<template id="x-input-template">
	<style>

		td,input{
			font-size:1.1em;
		}


		input{
			width:100%;
			min-width:5em;
			text-align:right;
			border:1px solid lightgrey;
			padding: 2px;
		}


		input:invalid{
			color:red;
			background-color:lightyellow;
			border-style:solid;
			border-width:1px;
		}


		div{
			/*border:1px solid lightgrey;
			padding: 0 2px;
			margin:1px;*/
		}


		#error{
			display:none;
			margin:3px;
			color:darkred;
			background-color:lightyellow;
			//border: 1px solid red;
			//border-radius: 0.5em;			
		}


		#unit{
			width:4em;
		}


		table{
			border-spacing:0px;
			width:100%;
		}


		div:hover{
			background-color:#E6E6FF;
		}


		div{
			cursor:pointer;
			-webkit-user-select:none;
			border-radius:4px;
		}

	</style>
	<div>
		<table>
			<tr>
				<td id="name" colspan=3></td>
			</tr>
			<tr>
				<td id="notation" style="padding:0.5em 0;text-align:right;width:8em;"></td>
				<td style="padding-left:0.3em;text-align:right;"><input type="text" required/></td>
				<td id="unit"></td>
			</tr>
			<tr>
				<td id="error" colspan=3>
					<p>A long and convoluted error message to teach people things</p>
					<p>Another longer and convoluted error message to teach people things</p>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="x-input-script">
var XInputPrototype = Object.create(HTMLDivElement.prototype);

XInputPrototype.createdCallback = function(){

	this.create = function(){
		//import content from the template element
		var imported = document.querySelector("#x-input-template").innerHTML;
		this.webkitCreateShadowRoot();
		this.webkitShadowRoot.innerHTML = imported;
		// Add some event listeners and shit.
		this.input = this.webkitShadowRoot.querySelector("input");

		this.input.addEventListener("input",function(e){
			var evt = new Event("input")
			evt.target = this;
			this.dispatchEvent(evt);
		}.bind(this));

		this.webkitShadowRoot.querySelector("div").addEventListener("mousedown",function(e){

			if(e.target!=this.input){
				e.preventDefault();
				this.input.focus();
			}

		}.bind(this))
		this.isvalid = function(thisval){return true;};
		this.getAttributes();
		MathJax.Hub.Queue(["Typeset",MathJax.Hub,this.webkitShadowRoot]);
	}.bind(this);

	this.getAttributes = function(){

		for(var i=0; i<this.attributes.length;i++){
			var att = this.attributes[i];
			this[att.name] = att.value;
		}

	}.bind(this);
	// DEFINE VALUE PROPERTY GETTER SETTER

	Object.defineProperty(this,"value",{

		get:function(){
			return this.input.value;
		}.bind(this),

		set:function(newval){
			this.input.value = newval;
		}.bind(this)
	});

	Object.defineProperty(this,"valid",{

		get:function(){
			this.isvalid(this.value);
		}

	});

	Object.defineProperty(this,"varname",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#name").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#name").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"notation",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#notation").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#notation").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"unit",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#unit").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#unit").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"pattern",{

		get:function(){
			return this.input.pattern;
		},

		set:function(newval){
			this.input.pattern = newval;
		}

	});

	Object.defineProperty(this,"type",{

		get:function(){
			return this.input.type;
		},

		set:function(newval){
			this.input.type = newval;
		}

	});

	Object.defineProperty(this,"min",{

		get:function(){
			return this.input.min;
		},

		set:function(newval){
			this.input.min = newval;
		}

	});

	Object.defineProperty(this,"max",{

		get:function(){
			return this.input.max;
		},

		set:function(newval){
			this.input.max = newval;
		}

	});

	Object.defineProperty(this,"step",{

		get:function(){
			return this.input.step;
		},

		set:function(newval){
			this.input.step = newval;
		}

	});

	Object.defineProperty(this,"data-tooltip",{

		get:function(){
			return this.webkitShadowRoot.querySelector("div").getAttribute("data-tooltip");
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("div").setAttribute("data-tooltip",newval);
		}

	});
	this.create();
}

var XInput = document.registerElement("x-input",{prototype:XInputPrototype});
</script>
	</html>