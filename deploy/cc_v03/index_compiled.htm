


<!--#########		 Crawling:.\index.htm		#########-->
	<html>
<head>
	<link rel="stylesheet" href="index.css" type="text/css"/>
	<script type="text/x-mathjax-config">

		MathJax.Hub.Config({
			extensions: ["tex2jax.js"],
			jax: ["input/TeX","output/HTML-CSS"],
			tex2jax: {inlineMath: [["$$","$$"],["$$$","$$$"]]},
			messageStyle: "none"
		});
	</script>
	<script type="text/javascript" src="../jslib/mathjax/MathJax.js"></script>
	<title> - BeamCAD - </title>
</head>
<body>
	<div id="apptitlebox" class="bmpblock">
		<div>BeamCAD v0.3</div>
		<div><a target="_blank" href="task/index.htm">1. Task	</a></div>
		<div><a target="_blank" href="https://www.surveymonkey.com/s/FBLMLHG">2. Survey	</a></div>
	</div>
	<div style="display:flex;flex-wrap:wrap;">
		<div id="invardiv" class="bmpblock">
			<div id="invardivdiv">
				<x-input	id="Ln"		
							notation ="$$$L_n$$$" 
							unit="mm"
							value="1000"
							type="number"
							min="1000"
							max="50000"
							step="100"
							data-tooltip="Clear Span from edge to edge of supports"></x-input>
				<x-input	id="b"
							notation ="$$$b$$$"
							unit="mm"
							value="300"
							type="number"
							min="200"
							max="5000"
							step="10"
							data-tooltip="Breadth (horizontal width) of rectangular beam cross section"></x-input>
				<x-input	id="D"
							notation ="$$$D$$$"
							unit="mm"
							value="600"
							type="number"
							min="200"
							max="3000"
							data-tooltip="Total depth (vertical height) of beam from top to bottom surface"></x-input>
				<x-input	id="cover"
							notation ="$$$\text{Cover}$$$"
							unit="mm"
							value="25"
							type="number"
							min="20"
							max="100"
							step="5"
							data-tooltip="Distance from the outer surface of concrete to the reo bars (all around)"></x-input>
				<x-input	id="eclass"
							notation ="$$$\text{E. Class}$$$"
							value="A"
							pattern="(A|B|C|D)"
							data-tooltip="Exposure Classification determined by exposure to natural environment. Use A | B | C | D"></x-input>
				<x-input	id="df"
							notation="$$$d_f$$$"
							unit="mm"
							value="10"
							data-tooltip="Diameter of fitment bars which from the 'ribcage' of the beam."></x-input> 
				<x-input	id="rhoc"
							notation="$$$\rho_c$$$"
							unit="kg/m&#179;"
							value="2400"
							type="number"
							min="2100"
							max="2800"
							step="10"
							data-tooltip="Concrete Density"></x-input>
				<x-input	id="fc"
							notation="$$$f'_c$$$"
							unit="MPa"
							value="32"
							pattern="(20|25|32|40|50|65|80|100)"
							data-tooltip="Concrete Strength"></x-input>
			</div>
			<div id="invardivtooltipbar" class="tooltipbar" style="align-self:flex-end;"></div>
		</div>
		<div id="varinfodiv" class="bmpblock" >
			<table style="width:100%;height:350px;padding:0;">
				<tr id="errortr" style="height:8em;display:none" >
					<td id="errortd" style="padding:5px;">Error:</td>
				</tr>
				<tr>
					<td>
						<iframe id="varinfoiframe" src="infos/index.htm" style="border:none;width:100%;height:100%;"></iframe>
					</td>
				</tr>
			</table>
		</div>
	</div>
	<div style="display:flex;flex-wrap:wrap;justify-content:center;">
		<div id="reoinputoutputdiv" class="bmpblock">
			<!--<div id="reocontroldiv"></div>-->
			<div id="reoinputdiv">
				<reo-manager></reo-manager>
			</div>
			<div style="width:100%;"></div>
			<div id="reooutputdiv">
				<reo-output></reo-output>
			</div>
			<div id="reoinputoutputtooltipbar" class="tooltipbar" style="height:4em;"></div>
		</div>
		<div id="crosssectiondiv" class="bmpblock" style="display:flex;flex-wrap:wrap;">
			<h1 style="display:block;width:100%">Cross Section</h1>
			<div style="width:100%;display:flex;justify-content:space-around;">
				<canvas id="crosssectioncanvas" style="background-color:black;"></canvas>
			</div>
		</div>
		<div id="elevationdiv" class="bmpblock" style="display:flex;flex-wrap:wrap;">
			<h1 style="display:block;width:100%">Elevation</h1>
			<div style="width:100%;">
				<canvas id="elevationcanvas" style="background-color:black;"></canvas>
			</div>
		</div>
	</div>
	<div style="min-height:300px;margin-bottom:40px;" class="bmpblock">
		<h1>Calculation Div</h1>
	</div>
</body>
<script data-root="../" data-main="../cc_v03/main.js" src="../jslib/nickRequire.js"></script>
<script>



// #########		 Crawling:.\main.js		#########
"use strict";



// #########		 Crawling:.\../jslib\Vector.js		#########

function Vector(x,y){
	this.x = x || 0;
	this.y = y || 0;

	this.set = function(x,y){
		this.x = x;
		this.y = y;
		return this;
	}.bind(this);

	this.fromVector = function(v){
		this.x = v.x;
		this.y = v.y;
		return this;
	}.bind(this);

	this.fromPoints = function(a,b){
		this.x = b.x-a.x;
		this.y = b.y-a.y;
		return this;
	}


	this.fromAngLen = function(angle,length){
		this.x = Math.cos(angle)*length;
		this.y = Math.sin(angle)*length;
		return this;
	}.bind(this);

	this.copy = function(){
		return new Vector(this.x,this.y);
	}.bind(this);
	this.duplicate = this.copy;

	this.plus = function(v){
		this.x+=v.x;
		this.y+=v.y;
		return this;
	}.bind(this);
	this.add = this.plus;

	this.plusScalar = function(s){
		this.x+=s;
		this.y+=s;
		return this;
	}.bind(this);
	this.addScalar = this.plusScalar;

	this.minus = function(v){
		this.x-=v.x;
		this.y-=v.y;
		return this;
	}.bind(this);
	this.subtract = this.minus;

	this.minusScalar = function(s){
		this.x-=s;
		this.y-=s;
		return this;
	}.bind(this);
	this.subtractScalar = this.minusScalar;

	this.scalar = function(s){
		this.x*=s;
		this.y*=s;
		return this;
	}.bind(this);

	this.dot = function(v){
		return  this.x*v.x + this.y*v.y;
	}.bind(this);

	this.left = function(){
		var tmpy = this.y;
		this.y = this.x;
		this.x = -tmpy;
		return this;
	}.bind(this);

	this.right = function(){
		var tmpy = this.y;
		this.y = -this.x;
		this.x = tmpy;
		return this;
	}.bind(this);

	this.unit = function(){
		var mag = this.len;
		this.x/=mag;
		this.y/=mag;
		return this;
	}.bind(this);

	Object.defineProperty(this,"lenSquared",{

		get:function(){
			return this.x*this.x + this.y*this.y;
		}.bind(this)
	});

	Object.defineProperty(this,"len",{

		get:function(){
			return Math.sqrt(this.lenSquared);
		}.bind(this)
	});

	Object.defineProperty(this,"ang",{

		get:function(){
			return Math.atan2(this.y,this.x);
		}.bind(this)
	});

	this.toString = function(){
		return "<"+this.x.toFixed(2)+", "+this.y.toFixed(2)+">";
	}.bind(this);

	this.rounded = function(){
		this.x =Math.round(this.x);
		this.y =Math.round(this.y);
		return this;
	}


	this.moveTo = function(ctx){
		ctx.moveTo(this.x,this.y);
		return this;
	}.bind(this);

	this.lineTo = function(ctx){
		ctx.lineTo(this.x,this.y);
		return this;
	}.bind(this);
}



// #########		 Crawling:.\widgets\widgets.js		#########

// ####### remainder of .\widgets\widgets.js has not been imported ########



// #########		 Crawling:.\Beam.js		#########
"use strict";

function Beam(){

	this.create = function(){
		// #########################################################
		// Misc considerations
		this.elcass 			= "A";
		this.minbarspacing		= undefined;
		// #########################################################
		// Reinforcement considerations
		this.reo = [
			{number:2, diameter:10, area:156, depth:25+10+10/2		},
			{number:2, diameter:10, area:200, depth:600-25-10-10/2	},
		];
		this.df		= 10;
		// #########################################################
		// Geometric considerations
		this.b		= 300;
		this.D		= 600;
		this.cover	= 25;
		this.Ln		= 3000;
		// #########################################################
		// Material considerations
		this.fc		= 32;
		this.Ec		= undefined;
		this.epsiloncmax = 0.003;// TODO: getcorrect code ref. AS3600 8.1.3??
		this.rohc	= 2400;
		// AS4671 500MPa Steel && AS3600
		this.fsy = 500;// Steel characteristic yield stress: MPa
		// AS3600 3.2.2 taken to be (or determined by test)
		// TODO: add Es to variable inputs (commit with35mins)
		this.Es = 200000;// Steel Young's modulus of elasticity: MPa
		this.epsilonsy = this.fsy/this.Es; // 0.0025 or there-abouts
	}.bind(this);
	// #############################################################################
	// ### CODE COMPLIANCE CHECKERS HELPER FUNCTIONS ###############################
	// #############################################################################	
	// TODO: is_deep_beam ?
	// #############################################################################
	// ### SERVICEABILITY LIMITS ###################################################
	// #############################################################################	
	// TODO:
	// #############################################################################
	// ### GEOMETRIC HELPER FUNCTIONS ##############################################
	// #############################################################################

	Object.defineProperty(this,"innerWidth",{

		get:function innerWidth(){
			return this.b - 2*(this.cover+this.df);
		}.bind(this)}

	);
	// TODO: Which layers of steel should be disregarded? Surely steel 'close' to the centroid should be left out.

	Object.defineProperty(this,"depthToTensionSteelCentroid",{

		get:function depthToTensionSteelCentroid(){
			var sum_area_times_depth = 0;
			var sum_area = 0;
			var layer_strain;
			var dn = this.dn;

			for(var i=0;i<this.reo.length;i++){
				layer_strain = this.layer_force_from_layer_dn(reo[i], dn);

				if(layer_strain>0){
					sum_area_times_depth += this.reo[i].getDepth()*this.reo[i].area;
					sum_area += this.reo[i].area;
				}

			}

			return sum_area_times_depth/sum_area;
		}.bind(this)
	});

	Object.defineProperty(this,"depthToCompressionSteelCentroid",{

		get:function depthToCompressionSteelCentroid(){
			var sum_area_times_depth = 0;
			var sum_area = 0;
			var layer_strain;
			var dn = this.dn;

			for(var i=0;i<this.reo.length;i++){
				layer_strain = this.layer_force_from_layer_dn(reo[i], dn);

				if(layer_strain<0){
					sum_area_times_depth += this.reo[i].getDepth()*this.reo[i].area;
					sum_area += this.reo[i].area;
				}

			}

			return sum_area_times_depth/sum_area;
		}.bind(this)
	});

	this.get_tension_reo = function(){
		var result = [];
		var dn = this.dn ;

		for(var i = 0; i < this.reo.length;i++){

			if(this.layer_strain_from_layer_dn(this.reo[i], dn)>0){
				result.push(this.reo[i]);
			}

		}

		return result;
	}.bind(this);

	this.get_compression_reo = function(){
		var result = [];
		var dn = this.dn ;

		for(var i = 0; i < this.reo.length;i++){

			if(this.layer_strain_from_layer_dn(this.reo[i], dn)<0){
				result.push(this.reo[i]);
			}

		}

		return result;
	}.bind(this);
	// #############################################################################
	// ### HIGH LEVEL CAPACITY FUNCTIONS ###########################################
	// #############################################################################

	Object.defineProperty(this,"Muo",{

		get:function Muo(){
			return (this.dsc-this.gamma*this.dn) * this.Cc_from_dn(this.dn)/1000; // kNm
		}.bind(this)}

	);

	Object.defineProperty(this,"dn",{get:function(){
		// TODO: make a beam flag to determine whether compression steel is considered in this calculation.
		// TODO: make a check to see that reo that is too small is never fed into this beam calculator
		var dn;
		var top = this.D;
		var bot = 0;
		var diff;
		var cnt = 0;

		do{
			dn = (top+bot)/2;
			diff = this.Ts_from_dn(dn)-this.Cs_from_dn(dn)-this.Cc_from_dn(dn);

			if(diff>0){
				bot = dn;

			}else{
				top = dn;
			}

			cnt++
		}while(Math.abs(diff) > 0.0001 && cnt<20);
		return dn;
	}.bind(this)});
	// #############################################################################
	// ### GET TOTAL STEEL FORCES ##################################################
	// #############################################################################

	Object.defineProperty(this,"Ts",{get:function(){
		return this.Ts_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cs",{get:function(){
		return this.Cs_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cc",{get:function(){
		return this.Cc_from_dn(this.dn);
	}.bind(this)});

	this.Ts_from_dn = function(dn){
		return this.Fs_from_dn(dn,true);
	}.bind(this);

	this.Cs_from_dn = function(dn){
		return this.Fs_from_dn(dn,false);
	}.bind(this);

	this.Fs_from_dn = function(dn, returntension){
		var result = 0;
		var epsilonsi;

		for(var i = 0;i<this.reo.length;i++){
			// First get strain in the steel layer according to similar triangles:
			epsilonsi = this.epsiloncmax/dn*(this.reo[i].depth - dn);
			// Limit the strain to a range of -0.0025 to 0.0025

			if(returntension){
				epsilonsi = Math.max(0, Math.min(epsilonsi, this.epsilonsy));

			}else{
				epsilonsi = Math.max(-this.epsilonsy, Math.min(epsilonsi, 0));
			}

			result += this.reo[i].area * this.Es * epsilonsi/1000; // kN
		}

		return result;
	}.bind(this);
	// #############################################################################
	// ### GET INDIVIDUAL STEEL FORCES #############################################
	// #############################################################################

	this.layer_strain_from_layer_dn = function(layer,dn){
		// First get strain in the steel layer according to similar triangles:
		var epsilonsi = this.epsiloncmax/dn*(layer.depth - dn);
		// Limit the strain to a range of -0.0025 to 0.0025
		// (The stress does not increase after yielding at fsy)
		epsilonsi = Math.max(-this.epsilonsy, Math.min(epsilonsi, this.epsilonsy));
		return epsilonsi
	}.bind(this);

	this.layer_force_from_layer_dn = function(layer,dn){
		var layer_strain = this.layer_strain_from_layer_dn(layer,dn);
		return layer.area * this.Es * layer_strain/1000; // kN
	}.bind(this);

	this.layer_yielded_from_layer_dn = function(layer,dn){
		var layer_strain = this.layer_strain_from_layer_dn(layer, dn);
		return layer_strain<=-0.0025 || layer_strain>=0.0025;
	}.bind(this);
	// ########################################################################
	// ####### GET CONCRETE FORCE #############################################
	// ########################################################################

	this.Cc_from_dn = function(dn){
		return (this.b*dn*this.gamma) * (this.fc*this.alpha2)/1000; // kN
	}.bind(this);
	// ########################################################################
	// #### MISC COEFICIENTS ##################################################
	// ########################################################################

	Object.defineProperty(this,"gamma",{get:function(){
		var r1 = 1.05-this.fc*0.007;
		var r2 = Math.max(0.67,Math.min(0.85,r1)) 
		return r2;
	}.bind(this)});

	Object.defineProperty(this,"alpha2",{get:function(){
		var r1 = 1-this.fc*0.003
		var r2 = Math.max(0.67,Math.min(0.85,r1));
		return r2;
	}.bind(this)});
	// STARTOFF: 4:35 14 04 14

	this.toString = function(){
		return JSON.stringify(this).replace(/,/g,",\n");
	}.bind(this);
	this.create();
	/*
	*/
};
// Create global beam object
var b = new Beam();

function intakeBeamValues(){
	b.Ln		= document.getElementById("Ln").value;
	b.b			= document.getElementById("b").value;
	b.D			= document.getElementById("D").value;
	b.cover		= document.getElementById("cover").value;
	b.eclass	= document.getElementById("eclass").value;
	b.df		= document.getElementById("df").value;
	b.rohc		= document.getElementById("rohc").value;
	b.fc		= document.getElementById("fc").value;
}


function intakeBeamReo(){
	var rm = document.querySelector("reo-manager");
	console.log(rm.getEnabledRows())
}

//###########################################################################################
//###### Canvas resize events ###############################################################
//###########################################################################################
window.addEventListener("resize",handleResize);
setTimeout(handleResize,500);
setTimeout(handleResize,1500);
setTimeout(handleResize,5000);
setTimeout(handleResize,10000);

function handleResize(e){
	var c=document.querySelector("#crosssectioncanvas");
	var st=window.getComputedStyle(c.parentElement);
	c.width = Math.min(500,parseInt(st.width));
	c.height = 300;
	var c=document.querySelector("#elevationcanvas");
	var st=window.getComputedStyle(c.parentElement);
	c.width = parseInt(st.width);
	c.height = 150;
	// TODO: Update drawing
}

//###########################################################################################
//###### Reo input/output helpers ###########################################################
//###########################################################################################

function setErrorList(list){

	if(list===undefined || list.length==0){
		document.querySelector("#errortr").style.display="none";

	}else{
		document.querySelector("#errortr").style.display="";
		var out = '<h1 style="color:darkred;">Error</h1>'

		for(var i = 0;i<list.length;i++){
			out+="<p>"+list[i]+"</p>";
		}

		document.querySelector("#errortd").innerHTML = out;
	}

}

//##################################################################3
//##### Tooltips ###################################################3
//##################################################################3

setTimeout(function(){
	addTooltipTo(document.querySelector("#invardiv"),document.querySelector("#invardivtooltipbar"));
	addTooltipTo(document.querySelector("#reoinputoutputdiv"),document.querySelector("#reoinputoutputtooltipbar"));
},1500);

function addTooltipTo(d, output){
	var els = d.querySelectorAll("*");

	for(var i = 0;i<els.length;i++){

		if(els[i].webkitShadowRoot!=null){
			addTooltipTo(els[i].webkitShadowRoot, output);
			//console.log(els[i]);

		}else if(els[i].getAttribute("data-tooltip")){
			els[i].output = output;

			els[i].addEventListener("mouseover",function(e){
				var targ = e.target; 

				while(targ.getAttribute("data-tooltip")===null){
					targ=targ.parentNode;
				}

				var ttb = this.output;
				ttb.innerHTML = "Pro-tip: "+targ.getAttribute("data-tooltip");
			}.bind(els[i]));

			els[i].addEventListener("mouseout",function(e){
				var ttb = this.output;
				ttb.innerHTML = "";
			}.bind(els[i]));
		}

	}

}

//##########################################################
//#### iFrame Scroll behaviour #############################
//##########################################################
var scroll_disabled = false;

document.querySelector("#varinfoiframe").addEventListener("mouseover",function(e){

	try{

		if(e.target.contentDocument.body.scrollHeight> e.target.contentDocument.body.clientHeight){
			scroll_disabled = true;
		}


	}catch(e){
		console.warn("iFrame Scroll prevention doesnt work :(");
	}

});

document.querySelector("#varinfoiframe").addEventListener("mouseout",function(e){
	scroll_disabled = false;
});

document.body.addEventListener("mousewheel",function(e){

	if(scroll_disabled){
		e.preventDefault();
	}

});
//##########################################################
//#### Contextual Help View ################################
//##########################################################

(function(){
	var xins = document.querySelectorAll("x-input");

	for(var i = 0;i<xins.length;i++){

		xins[i].addEventListener("mousedown",function(e){
			setHelpLoc("infos/"+e.target.id+".htm");
		})
	}

})()

function setHelpLoc(url){

	if(document.querySelector("#varinfoiframe").getAttribute("src") != url){
		document.querySelector("#varinfoiframe").contentWindow.location.replace(url);
	}

}

var ifrm = document.querySelector("#varinfoiframe");</script>




<!--#########		 Crawling:.\widgets\ReoInput.htm		#########-->
<template id="ReoInputWidgetTemplate">
	<style>

		.spinbut{
			width:15px;
			height:11px;
			display:block;
			font-size:5px;
			margin:0px;
			padding:0px;
			text-align:center;
		}


		#barcode{
			text-align:right;
			width:3.6em;
			padding: 0 3px;
			font-weight:bold;
		}


		#barcode:enabled{
			color:darkblue;
		}


		#barcode:invalid{
			color:red;
			background-color: yellow;
		}


		#infobut{
			font-family:monospace;
			color:darkblue;
			width:2em;
			font-weight:bold;
		}


		#infobut:disabled{
			color:lightgrey;
			font-weight:regular;
		}


		#from:disabled, input:disabled{
			color:rgb(220, 220, 215);
			background-color:rgb(235, 235, 228);
		}


		input:invalid{
			color:red;
			background-color: yellow;
		}

		input[type=number]::-webkit-inner-spin-button,

		input[type=number]::-webkit-outer-spin-button {
			-webkit-appearance: none;
			margin: 0;
		}


		div:hover{
			background-color:#E6E6FF;
		}


		div:hover #enabledtd{
			border-radius:4px;
			background-color:lightgreen;
		}


		div{
			border-radius:4px;
			cursor:pointer;
			-webkit-user-select:none;
		}

	</style>
	<div style="min-width:360px;max-width:520px;color:grey;" data-tooltip="Click to include in summary table below">
		<table id="rin" style="color:inherit;width:100%;" cellspacing=0>
			<tr>
				<td id="enabledtd" style="padding:0;">
					<input id="enabled" type="checkbox" data-tooltip="Enable/Disable Reo Layer."/>
				</td>
				<td style="text-align:right;">
					<input id="barcode" type="text" required pattern="(([1-2][0-9])|[2-9])N(10|12|16|20|24|28|32|36|40)" value="2N10" placeholder="eg. 2N10"
							data-tooltip="Number of bars, Grade, Nominal Diameter. eg 3N24<br> Only N grade bars are allowed in this software.<br>Avaliable bar diameters are:<br>[10, 12, 16, 20, 24, 28, 32, 36, 40]mm"/>
				</td>
				<td style="text-align:left;">
					<button tabindex="-1" class="spinbut" id="spinbutup"	data-tooltip="more"><!--&#9650;--></button>
					<button tabindex="-1" class="spinbut" id="spinbutdown"	data-tooltip="less"><!--&#9660;--></button>
				</td>
				<td id="asttd" style="text-align:left;width:6em;"
						data-tooltip="Area calculated by multiplying the number of bars by the perscribed cross sectional areas defined in AS4671.">
					= <span id="area">0000</span> mm&#178;
				</td>
				<td style="text-align:right;padding-left:0.5em;">
					<input id="offset" type="number" required min="0" max="10000" value="0" style="text-align:right;width:4em;" data-tooltip="Offset: Space between the bars of this layer and the next."/>
				</td>
				<td style="text-align:left;padding-left:0;" id="mmlable">
					mm
				</td>
				<td style="text-align:right;padding-right:0;padding-left:0.5em;" id ="fromlable">
					from
				</td>
				<td>
					<select id="from" data-tooltip="Where to offset this layer from.">
						<option value="top">top</option>
						<option value="highest">highest</option>
						<option value="lowest" selected>lowest</option>
						<option value="bottom">bottom</option>
					</select>
				</td>
				<td style="padding-left:0.5em;">
					<button id="infobut" data-tooltip="Click to include in summary table below" style="width:1.8em;height:100%;line-height:100%;"></button>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoInputWidgetScript">
	ReoInputPrototype = Object.create(HTMLDivElement.prototype);

	ReoInputPrototype.createdCallback = function(){
		this._selected = false;
		this._enabled = false;

		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoInputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			// ---------
			// PROPERTIES
			console.log(this, this.parentElement);
			this.manager = this.parentElement;
			this.maindiv = this.doc.querySelector("div");
			this.enabledIn = this.doc.querySelector("#enabled");
			this.barcodeIn = this.doc.querySelector("#barcode");
			this.areaOut = this.doc.querySelector("#area");
			this.fromIn = this.doc.querySelector("#from");
			this.infobutIn = this.doc.querySelector("#infobut");
			this.offsetIn = this.doc.querySelector("#offset");
			this.spinbutup = this.doc.querySelector("#spinbutup");
			this.spinbutdown = this.doc.querySelector("#spinbutdown");
			this.selected = false;
			this.enabled = false;
			// -----------------------------------------------------
			// EVENT LISTENERS

			this.infobutIn.addEventListener("click",function(e){
				this.toggleSelected();
			}.bind(this));

			this.webkitShadowRoot.addEventListener("click",function(e){

				switch(e.target.nodeName){
					case "INPUT":
					case "BUTTON":
					case "SELECT":
						break;
					default:

						if(this.enabled == false){
							this.enabled = true;
						}

						this.toggleSelected();
				}

			}.bind(this));
			this.spinbutup.addEventListener("click",this.more);
			this.spinbutdown.addEventListener("click",this.less);

			this.fromIn.addEventListener("change",function(e){
				this.dispatchChangeEvent();
			}.bind(this));
			this.offsetoldval = this.offsetIn.value;

			this.offsetIn.addEventListener("keyup",function(e){

				if(this.offsetoldval!==this.offsetIn.value){
					this.offsetoldval = this.offsetIn.value;
					this.dispatchChangeEvent();
				}

			}.bind(this))

			this.enabledIn.addEventListener("change",function(){
				this.enabled = this.enabledIn.checked;
				console.log("change")
				this.dispatchChangeEvent();
			}.bind(this));

			this.barcodeIn.addEventListener("keydown",function(e){
				if(e.keyCode == 38){	// up button
					this.more();
					e.preventDefault();
				}

				if(e.keyCode == 40){	// down button
					this.less();
					e.preventDefault();
				}

			}.bind(this))
			this.barcodeIn.addEventListener("change",this.update);

			this.barcodeIn.addEventListener("input",function(e){
				var val = e.target.value;
				var ss = e.target.selectionStart;
				var se = e.target.selectionEnd;
				var arr = val.split("")
				var flag = false;
				var noN = true;

				for(var i=0;i<arr.length;i++){

					if((/[^0-9nN]/).test(arr[i])){
						arr.splice(i--,1);
						;

						if(i<ss){
							ss--;
							se=ss;
						}

					}


					if(arr[i]=="N"){
						noN = false;
					}

				}

				val = arr.join("");
				val = val.toUpperCase();
				e.target.value =  val;
				e.target.setSelectionRange(ss,se);
				this.update();
			}.bind(this))
		}.bind(this);

		this.dispatchChangeEvent = function(){
			var e = new Event("change");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		this.update = function(){
			var e = new Event("update");
			e.target = this;
			e.bubbles = true;
			this.dispatchEvent(e);
			this.areaOut.innerHTML = this.area || "--";
		}.bind(this);

		this.makeFirstRow = function(){
			this.enabled = true;
			this.enabledIn.disabled = true;
			this.offsetIn.disabled = true;
			this.fromIn.disabled = true;
			this.offsetIn.style.visibility = "hidden";
			this.fromIn.style.visibility = "hidden";
			this.webkitShadowRoot.querySelector("#mmlable").style.visibility = "hidden";
			this.webkitShadowRoot.querySelector("#fromlable").style.visibility = "hidden";
		}.bind(this);

		Object.defineProperty(this,"enabled",{

			get:function(){
				return this._enabled;
			}.bind(this),

			set:function(newval){
				this._enabled = newval;

				if(newval == true){
					var e = new Event("enabled");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
					this.webkitShadowRoot.querySelector("div").style.color = "";

				}else if(newval == false){
					this.webkitShadowRoot.querySelector("div").style.color = "grey";
					var e = new Event("disabled");
					e.target = this;
					this.dispatchEvent(e);
					this.selected = false;
					//this.dispatchChangeEvent(); this will be dispatched as a result of the line above
				}

				this.enabledIn.checked = newval;
				var ins = this.doc.querySelectorAll("input, button, select")

				for(var i = 0; i < ins.length;i++){

					if(ins[i].id!="enabled"){
						ins[i].disabled=!newval;
					}

				}

				this.update();
			}.bind(this),
		});

		Object.defineProperty(this,"area",{

			get:function(){
				var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
				var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
				return areas[diameters.indexOf(this.diameter)]*this.number || undefined;
			}.bind(this)
		});

		Object.defineProperty(this,"diameter",{

			get:function(){
				return parseInt(this.barcode.split("N")[1])||undefined;
			}.bind(this),

			set:function(newval){
				var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];

				if(diameters.indexOf(newval)!==-1){
					this.barcode = this.number + "N" + newval;

				}else{
					console.warn("Invalid assignment to reo-input diameter: "+newval);
				}

			}.bind(this)
		});

		Object.defineProperty(this,"number",{

			get:function(){
				return parseInt(this.barcode.split("N")[0])||undefined;
			}.bind(this),

			set:function(newval){

				if(typeof newval == "number" && newval!==NaN && newval!==undefined && newval>=2 && newval<100){
					this.barcode = newval + "N" + this.diameter;

				}else{
					console.warn("Invalid assignment to reo-input number: "+newval);
				}

			}.bind(this)
		});

		Object.defineProperty(this,"barcode",{

			get:function(){
				return this.barcodeIn.value;
			}.bind(this),

			set:function(newval){
				this.barcodeIn.value = newval;
				this.update();
			}.bind(this),
		});

		this.more = function(){
			var e = new Event("gimmemore");
			e.bubbles = false;
			e.target = this;
			this.dispatchEvent(e);
			var b = document.querySelector("#b").value;
			var D = document.querySelector("#D").value;
			var df = document.querySelector("#df").value;
			var cover = document.querySelector("#cover").value;
			var fitwidth = b-2*cover-2*df;
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			var manager = this.parentElement;
			if(manager.getBottomRow()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
				// TODO: assume minimum spacing of 20mm between
				// TODO: assume maximum spacing of 300mm c-c
				// TODO: assume maximum of 10 bars
				this.barcode = this._more_less_barcode(true, 10, 300, 20, fitwidth, this.area);

			}else{
				// TODO: assume maximum of 2 bars
				this.barcode = this._more_less_barcode(true, 2,  300, 20, fitwidth, this.area);
			}

			this.update();
		}.bind(this);

		this.less = function(){
			var e = new Event("gimmeless");
			e.bubbles = false;
			e.target = this;
			this.dispatchEvent(e);
			var b = document.querySelector("#b").value;
			var D = document.querySelector("#D").value;
			var df = document.querySelector("#df").value;
			var cover = document.querySelector("#cover").value;
			var fitwidth = b-2*cover-2*df;
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			var manager = this.parentElement;
			if(manager.getBottomRow()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
				// TODO: assume minimum spacing of 20mm between
				// TODO: assume maximum spacing of 300mm c-c
				// TODO: assume maximum of 10 bars
				this.barcode = this._more_less_barcode(false, 10, 300, 20, fitwidth, this.area);

			}else{
				// TODO: assume maximum of 2 bars
				this.barcode = this._more_less_barcode(false, 2,  300, 20, fitwidth, this.area);
			}

			this.update();
		}.bind(this);

		this._more_less_barcode = function(getmore, maxbar, max_spacing, min_gap fitwidth, current_area){
		/*
			var diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
			var areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
			var combs = [];
			var num,dia,diai,minw,maxw;

			for(num = 2; num<=maxbar;num++){

				for(diai=0;diai<diameters.length;diai++){
					dia = diameters[diai];
					minw = dia*num+(num-1)*min_gap;
					maxw = dia*num+(num-1)*max_spacing;

					if(fitwidth>=minw && fitwidth<=maxw){
						combs.push({number:num, diameter:dia, area:areas[diai]*num})
					}

				}

			}


			combs.sort(function(a,b){

				if(getmore){
					return a.area-b.area;

				}else{
					return b.area-a.area;
				}

			})

			for(var i = 0;i<combs.length;i++){

				if(getmore){

					if(combs[i].area>current_area){

						if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i+1].area-combs[i].area<50){
							i++;

							if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i+1].area-combs[i].area<10){
								i++;
							}

						}

						return combs[i].number+"N"+combs[i].diameter;
					}


				}else{

					if(combs[i].area<current_area){

						if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i].area-combs[i+1].area<50){
							i++;

							if(i+1<combs.length && combs[i+1].number<combs[i].number && combs[i].area-combs[i+1].area<10){
								i++;
							}

						}

						return combs[i].number+"N"+combs[i].diameter;
					}

				}

			}

		*/
		}.bind(this);

		Object.defineProperty(this,"offset",{

			get:function(){
				return parseInt(this.offsetIn.value);
			}.bind(this),

			set:function(newval){
				this.offsetIn.value = Math.abs(Math.round(parseFloat(newval)));
				this.update();
			}.bind(this),
		});

		Object.defineProperty(this,"from",{

			get:function(){
				return this.fromIn.value;
			}.bind(this),

			set:function(newval){
				this.fromIn.value = newval;
				this.update();
			}.bind(this),
		});

		Object.defineProperty(this,"selected",{

			get:function(){
				return this._selected;
			}.bind(this),

			set:function(newval){

				if(!this._selected && newval){
					if(!this.enabled) return;
					this.maindiv.style.backgroundColor = "lightblue";
					this.infobutIn.innerHTML = "&#8721;";
					//this.infobutIn.style.fontWeight = "bold";
					var e = new Event("select");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();

				}else if(!newval && this._selected){
					this.maindiv.style.backgroundColor = "";
					this.infobutIn.innerHTML = "";
					//this.infobutIn.style.fontWeight = "";
					var e = new Event("unselect");
					e.target = this;
					this.dispatchEvent(e);
					this.dispatchChangeEvent();
				}

				this._selected = newval;
				this.update();
			}.bind(this),
		});

		this.toggleSelected = function(e){

			if(this.enabled){
				this.selected = !this.selected;
			}

		}.bind(this);
		this.create();
	};
	var ReoInput = document.registerElement("reo-input",{prototype:ReoInputPrototype});
</script>


<!--#########		 Crawling:.\widgets\ReoManager.htm		#########-->
<template id="reoManagerTemplate"></template>
<script id="reoManagerScript">
	ReoManagerPrototype = Object.create(HTMLDivElement.prototype);

	ReoManagerPrototype.createdCallback = function(){
		this.rows = [];

		this.create = function(){
			var firstrow = this.createReoInput();
			firstrow.makeFirstRow();
			this.rows.push(this.createReoInput());
			this.rows.push(this.createReoInput());
			this.rows.push(this.createReoInput());
			this.rows.push(firstrow);

			for(var i = 0;i<this.rows.length;i++){
				this.appendChild(this.rows[i]);
			}

			this.update();
		}.bind(this);

		this.getEnabledSelectedRows = function(){
			var result = [];

			for(var i = 0;i<this.rows.length;i++){

				if(this.rows[i].enabled && this.rows[i].selected){
					result.push(this.rows[i]);
				}

			}

			return result;
		}.bind(this);

		this.getEnabledRows = function(){
			var result = [];

			for(var i = 0;i<this.rows.length;i++){

				if(this.rows[i].enabled){
					result.push(this.rows[i]);
				}

			}

			return result;
		}.bind(this);

		this.getBottomRow = function(){
			var r = this.getEnabledRows();
			return r[r.length-1];
		}.bind(this);

		this.getTopRow = function(){
			var r = this.getEnabledRows();
			return r[0];
		}.bind(this);

		this.getDepthOfRow = function(row){
			var br = this.getBottomRow();
			var bottomDepth = D-cover-df-br.diameter/2;

			for(var i = rows.length-2;i>=0;i--){
			}

			// TODO: get the depth of the bottom row
		}.bind(this);

		this.createReoInput = function(){
			var nr = new ReoInput();
			nr.addEventListener("change",this.update);

			nr.addEventListener("gimmemore",function(e){
				// TODO:
			});

			nr.addEventListener("gimmeless",function(e){
				// TODO: 
			});
			return nr;
		}.bind(this);

		this.update = function(){
			var e = new Event("update");
			e.target = this;
			this.dispatchEvent(e);
		}.bind(this);

		this.adjustLength = function(){

			if(this.rows.length==1){
				this.rows.unshift(this.createReoInput())
			}


			while(!this.rows[0].enabled && this.rows.length>2 && !this.rows[1].enabled){
				this.removeChild(this.rows.shift());
			}


			for(var i=0;i<this.rows.length;i++){

				if(i==0 && this.rows[i].enabled){
					this.rows.unshift(this.createReoInput())
				}

				// Insert inbetween behaviour

				if(this.rows[i+1] && this.rows[i+1].enabled && this.rows[i].enabled && this.rows[i].from!=this.rows[i+1].from){
					//this.rows.splice(i+1,0,this.createReoInput());
					//i++;
				}

				// remove double blanks

				if(this.rows[i+1] && !this.rows[i+1].enabled && !this.rows[i].enabled){
					//this.removeChild(this.rows[i]);
					//this.rows.splice(i,1);
					//i--;
				}

			}

		}.bind(this);
		this.create();
	};
	window.ReoManager = document.registerElement("reo-manager",{prototype:ReoManagerPrototype});
</script>



<!--#########		 Crawling:.\widgets\ReoOutput.htm		#########-->
<template id="ReoOutputWidgetTemplate">
	<style>

		#rout td{
			border-bottom:1px solid lightgrey;
		}


		.tableout{
			color:darkblue;
			text-align:right;
			font-family:sans-serif;
			padding-right:0;
			min-width:50px;
			font-size:90%;
			padding-right:0.5em;
		}

	</style>
	<div style="min-width:315px;max-width:500px;">
		<table id="rout" style="width:100%" cellspacing=0>
			<tr data-tooltip="Depth measured from top surface of beam to centroid of layer[s].">
				<td id="depthlable">Depth from top surface:</td>
				<td class="tableout" id="depth">1200</td>
				<td>mm</td>
			</tr>
			<tr data-tooltip="Cross-sectional area of reo-bar layer[s]">
				<td id="arealable">Cross-sectional area of steel:</td>
				<td id="area" class="tableout">30000</td>
				<td>mm&#178;</td>
			</tr>
			<tr>
				<td id="amountlable" rowspan=4>Amount:</td>
				<td id="nbars" class="tableout" data-tooltip="Number of reo bars in layer[s]">10</td>
				<td>bars</td>
			</tr>
			<tr>
				<td id="length" class="tableout" data-tooltip="Total length of reo bars based on clear span L_n with no overlap">10</td>
				<td>m</td>
			</tr>
			<tr>
				<td id="masspermeter" class="tableout" data-tooltip="Total mass/meter of layer[s]">5</td>
				<td>kg/m</td>
			</tr>
			<tr>
				<td id="mass" class="tableout" data-tooltip="Total mass of layer[s]">400</td>
				<td>kg</td>
			</tr>
			<tr data-tooltip="Total tensile force in layer[s]. Compressive force is shown negative." >
				<td id="tforcelable" style="border-bottom:none;">Layer Tension Force:</td>
				<td id="tforce" style="border-bottom:none;"  class="tableout">200</td>
				<td style="border-bottom:none;" >kN</td>
			</tr>
		</table>
	</div>
</template>
<script id="ReoOutputWidgetScript">
	ReoOutputPrototype = Object.create(HTMLDivElement.prototype);

	ReoOutputPrototype.createdCallback = function(){

		this.create = function(){
			// --------
			// CONSTRUCT
			this.webkitCreateShadowRoot();
			var imported = document.importNode(document.querySelector("#ReoOutputWidgetTemplate").content, true);
			this.webkitShadowRoot.appendChild(imported);
			this.doc = this.webkitShadowRoot;
			this.oneLables();
			this.blank();
		}.bind(this);

		this.setIdContent=function(id, content){
			var elem = this.webkitShadowRoot.querySelector("#"+id);

			if(elem!=null){
				elem.innerHTML = content;

			}else{
				throw new Error("ReoOutput: No id of: "+id);
			}

		}.bind(this);

		this.oneLables = function(){
			this.setIdContent("depthlable",		"Depth to layer:");
			this.setIdContent("arealable",		"Layer Cross-sectional Area:");
			this.setIdContent("amountlable",	"Amount:");
			this.setIdContent("tforcelable",	"Layer Tension Force:");
		}.bind(this);

		this.avgLables = function(){
			this.setIdContent("depthlable",		"Depth to <i>centroid</i>:");
			this.setIdContent("arealable",		"&#8721; Cross-sectional Area:");
			this.setIdContent("amountlable",	"&#8721; Amount:");
			this.setIdContent("tforcelable",	"&#8721; Tension Force:");
		}


		this.blank = function(){
			this.setIdContent("depth",			"--");
			this.setIdContent("area",			"--");
			this.setIdContent("nbars",			"--");
			this.setIdContent("length",			"--");
			this.setIdContent("masspermeter",	"--");
			this.setIdContent("mass",			"--");
			this.setIdContent("tforce",			"--");
		}

		this.create();
	};
	var ReoOutput = document.registerElement("reo-output",{prototype:ReoOutputPrototype});
</script>


<!--#########		 Crawling:.\widgets\XInput.htm		#########-->
<template id="x-input-template">
	<style>

		td,input{
			font-size:1.1em;
		}


		input{
			width:100%;
			text-align:right;
			border:1px solid lightgrey;
			padding: 2px;
		}


		input:invalid{
			color:red;
			background-color:lightyellow;
			border-style:solid;
			border-width:1px;
		}


		div{
			/*border:1px solid lightgrey;
			padding: 0 2px;
			margin:1px;*/
		}


		#error{
			display:none;
			margin:3px;
			color:darkred;
			background-color:lightyellow;
			//border: 1px solid red;
			//border-radius: 0.5em;			
		}


		#unit{
			width:3em;
			font-family: Palatino, serif;
		}


		table{
			border-spacing:0px;
			width:100%;
		}


		div:hover{
			background-color:#E6E6FF;
		}


		div{
			cursor:pointer;
			-webkit-user-select:none;
			border-radius:4px;
		}

	</style>
	<div>
		<table>
			<tr>
				<td id="name" colspan=3></td>
			</tr>
			<tr>
				<td id="notation" style="padding-right:0.5em;text-align:right;width:4em;"></td>
				<td style="padding-left:0.3em;text-align:right;width:5em;"><input type="text" required/></td>
				<td id="unit"></td>
			</tr>
			<tr>
				<td id="error" colspan=3>
					<p>A long and convoluted error message to teach people things</p>
					<p>Another longer and convoluted error message to teach people things</p>
				</td>
			</tr>
		</table>
	</div>
</template>
<script id="x-input-script">
var XInputPrototype = Object.create(HTMLDivElement.prototype);

XInputPrototype.createdCallback = function(){

	this.create = function(){
		//import content from the template element
		var imported = document.querySelector("#x-input-template").innerHTML;
		this.webkitCreateShadowRoot();
		this.webkitShadowRoot.innerHTML = imported;
		// Add some event listeners and shit.
		this.input = this.webkitShadowRoot.querySelector("input");

		this.input.addEventListener("input",function(e){
			var evt = new Event("input")
			evt.target = this;
			this.dispatchEvent(evt);
		}.bind(this));

		this.webkitShadowRoot.querySelector("div").addEventListener("mousedown",function(e){

			if(e.target!=this.input){
				e.preventDefault();
				this.input.focus();
			}

		}.bind(this))
		this.isvalid = function(thisval){return true;};
		this.getAttributes();
		MathJax.Hub.Queue(["Typeset",MathJax.Hub,this.webkitShadowRoot]);
	}.bind(this);

	this.getAttributes = function(){

		for(var i=0; i<this.attributes.length;i++){
			var att = this.attributes[i];
			this[att.name] = att.value;
		}

	}.bind(this);
	// DEFINE VALUE PROPERTY GETTER SETTER

	Object.defineProperty(this,"value",{

		get:function(){
			return this.input.value;
		}.bind(this),

		set:function(newval){
			this.input.value = newval;
		}.bind(this)
	});

	Object.defineProperty(this,"valid",{

		get:function(){
			this.isvalid(this.value);
		}

	});

	Object.defineProperty(this,"varname",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#name").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#name").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"notation",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#notation").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#notation").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"unit",{

		get:function(){
			return this.webkitShadowRoot.querySelector("#unit").innerHTML;
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("#unit").innerHTML = newval;
		}

	});

	Object.defineProperty(this,"pattern",{

		get:function(){
			return this.input.pattern;
		},

		set:function(newval){
			this.input.pattern = newval;
		}

	});

	Object.defineProperty(this,"type",{

		get:function(){
			return this.input.type;
		},

		set:function(newval){
			this.input.type = newval;
		}

	});

	Object.defineProperty(this,"min",{

		get:function(){
			return this.input.min;
		},

		set:function(newval){
			this.input.min = newval;
		}

	});

	Object.defineProperty(this,"max",{

		get:function(){
			return this.input.max;
		},

		set:function(newval){
			this.input.max = newval;
		}

	});

	Object.defineProperty(this,"step",{

		get:function(){
			return this.input.step;
		},

		set:function(newval){
			this.input.step = newval;
		}

	});

	Object.defineProperty(this,"data-tooltip",{

		get:function(){
			return this.webkitShadowRoot.querySelector("div").getAttribute("data-tooltip");
		},

		set:function(newval){
			this.webkitShadowRoot.querySelector("div").setAttribute("data-tooltip",newval);
		}

	});
	this.create();
}

var XInput = document.registerElement("x-input",{prototype:XInputPrototype});
</script>
	</html>