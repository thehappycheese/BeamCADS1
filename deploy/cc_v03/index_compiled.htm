


<!--#########		 Crawling:.\index.htm		#########-->
	<html>
<head>
	<link rel="stylesheet" href="index.css" type="text/css"/>
	<script type="text/x-mathjax-config">

		MathJax.Hub.Config({
			extensions: ["tex2jax.js"],
			jax: ["input/TeX","output/HTML-CSS"],
			tex2jax: {inlineMath: [["$$","$$"],["$$$","$$$"]]},
			messageStyle: "none"
		});
	</script>
	<script type="text/javascript" src="../jslib/mathjax/MathJax.js"></script>
	<title> - BeamCAD - </title>
</head>
<body>
	<div id="apptitlebox" class="bmpblock">
		<div>Beam CC</div>
		<div><a target="_blank" href="task/index.htm">1. Task	</a></div>
		<div><a target="_blank" href="https://www.surveymonkey.com/s/FBLMLHG">2. Survey	</a></div>
	</div>
	<div style="display:flex;flex-wrap:wrap;justify-content:center;">	
		<div id="invardiv" class="bmpblock">
			<div style="width:100%;">
				<h2>General Variables</h2>
			</div>
			<div id="invardivdiv">
			</div>
			<div id="invardivtooltipbar" class="tooltipbar">
				.
			</div>
			<div id="invardiverrorbar">
				.
			</div>
		</div>
		<div id="varinfodiv" class="bmpblock" >
			<h2>Variable Reference Information</h2>
			<iframe id="varinfoiframe" src="infos/index.htm" style="border:1px solid grey;width:calc(100% - 10px);height:460px;margin:5px;"></iframe>
		</div>
		<div id="reoinputoutputdiv" class="bmpblock">
			<div style="width:100%;">
				<h2>Reinforcement Information</h2>
			</div>
			<div id="reoinputdiv">
				<table class="reotable" style="">
					<thead>
						<tr style="font-family:sans-serif;">
							<td style="width:2em;"><img src="img/power_icon.png"/></td>
							<td style="width:3em;">bars</td>
							<td style="width:30px;border-left:none;"></td>
							<td style="width:3em;">area<br>(mm&sup2;)</td>
							<td>gap<br>(mm)</td>
							<td>position<br>(mm)</td>
							<td  style="width:2em;"><img src="img/sum_icon.png"/></td>
						</tr>
					</thead>
					<tbody id="reorows">
					</tbody>
				</table>
			</div>
			<div style="width:100%;"></div>
			<div id="reooutputdiv">
				<!-- TODO ressurect this-->
				<table id="reoouttable" style="width:100%" cellspacing=0>
					<thead>
						<tr>
							<th>Value:</th>
							<th>Hover:</th>
							<th>Sum:</th>
							<th>Unit:</th>
						</tr>
					</thead>
					<tbody>
						<tr data-tooltip="Depth measured from top surface of beam to centroid of layer[s].">
							<td id="depthlable">Depth from top surface:</td>
							<td>.</td>
							<td class="tableout" id="depth">1200</td>
							<td>mm</td>
						</tr>
						<tr data-tooltip="Cross-sectional area of reo-bar layer[s]">
							<td id="arealable">Cross-sectional area of steel:</td>
							<td>.</td>
							<td id="area" class="tableout">30000</td>
							<td>mm&#178;</td>
						</tr>
						<tr>
							<td id="amountlable">Number of bars</td>
							<td>10</td>
							<td id="number" class="tableout" data-tooltip="Number of reo bars in layer[s]">10</td>
							<td>bars</td>
						</tr>
						<tr>
							<td>.</td>
							<td>.</td>
							<td id="length" class="tableout" data-tooltip="Total length of reo bars based on clear span L_n with no overlap">10</td>
							<td>m</td>
						</tr>
						<tr>
							<td>.</td>
							<td>.</td>
							<td id="mass" class="tableout" data-tooltip="Total mass of layer[s]">400</td>
							<td>kg</td>
						</tr>
						<tr data-tooltip="Total tensile force in layer[s]. Compressive force is shown negative." >
							<td id="tforcelable" style="border-bottom:none;">Layer Tension Force:</td>
							<td>.</td>
							<td id="tforce" style="border-bottom:none;"  class="tableout">200</td>
							<td style="border-bottom:none;" >kN</td>
						</tr>
					</tbody>
				</table>
			</div>
			<div id="reoinputoutputtooltipbar" class="tooltipbar" style="height:4em;"></div>
		</div>
		<div id="crosssectiondiv" class="bmpblock" style="">
			<div style="width:100%;align-self:flex-start;">
				<h2>Cross Section</h2>
			</div>
			<canvas width="400" height="300" id="crosssectioncanvas" style="background-color:black;"></canvas>
		</div>
		<div style="flex: 1 0 500px;min-height:300px;margin-bottom:40px;" class="bmpblock">
			<div style="width:100%;">
				<h2>Calculations</h2>
			</div>
			<div id="calcdivcontent"></div>
		</div>
	</div>
</body>
<!--<script data-root="../" data-main="../cc_v03/main.js" src="../jslib/nickRequire.js"></script>-->
<script>



// #########		 Crawling:.\main.js		#########
"use strict";



// #########		 Crawling:.\../jslib\Vector.js		#########

function Vector(x,y){
	this.x = x || 0;
	this.y = y || 0;

	this.set = function(x,y){
		this.x = x;
		this.y = y;
		return this;
	}.bind(this);

	this.fromVector = function(v){
		this.x = v.x;
		this.y = v.y;
		return this;
	}.bind(this);

	this.fromPoints = function(a,b){
		this.x = b.x-a.x;
		this.y = b.y-a.y;
		return this;
	}


	this.fromAngLen = function(angle,length){
		this.x = Math.cos(angle)*length;
		this.y = Math.sin(angle)*length;
		return this;
	}.bind(this);

	this.copy = function(){
		return new Vector(this.x,this.y);
	}.bind(this);
	this.duplicate = this.copy;

	this.plus = function(v){
		this.x+=v.x;
		this.y+=v.y;
		return this;
	}.bind(this);
	this.add = this.plus;

	this.plusScalar = function(s){
		this.x+=s;
		this.y+=s;
		return this;
	}.bind(this);
	this.addScalar = this.plusScalar;

	this.minus = function(v){
		this.x-=v.x;
		this.y-=v.y;
		return this;
	}.bind(this);
	this.subtract = this.minus;

	this.minusScalar = function(s){
		this.x-=s;
		this.y-=s;
		return this;
	}.bind(this);
	this.subtractScalar = this.minusScalar;

	this.scalar = function(s){
		this.x*=s;
		this.y*=s;
		return this;
	}.bind(this);

	this.dot = function(v){
		return  this.x*v.x + this.y*v.y;
	}.bind(this);

	this.left = function(){
		var tmpy = this.y;
		this.y = this.x;
		this.x = -tmpy;
		return this;
	}.bind(this);

	this.right = function(){
		var tmpy = this.y;
		this.y = -this.x;
		this.x = tmpy;
		return this;
	}.bind(this);

	this.unit = function(){
		var mag = this.len;
		this.x/=mag;
		this.y/=mag;
		return this;
	}.bind(this);

	Object.defineProperty(this,"lenSquared",{

		get:function(){
			return this.x*this.x + this.y*this.y;
		}.bind(this)
	});

	Object.defineProperty(this,"len",{

		get:function(){
			return Math.sqrt(this.lenSquared);
		}.bind(this)
	});

	Object.defineProperty(this,"ang",{

		get:function(){
			return Math.atan2(this.y,this.x);
		}.bind(this)
	});

	this.toString = function(){
		return "<"+this.x.toFixed(2)+", "+this.y.toFixed(2)+">";
	}.bind(this);

	this.rounded = function(){
		this.x =Math.round(this.x);
		this.y =Math.round(this.y);
		return this;
	}


	this.moveTo = function(ctx){
		ctx.moveTo(this.x,this.y);
		return this;
	}.bind(this);

	this.lineTo = function(ctx){
		ctx.lineTo(this.x,this.y);
		return this;
	}.bind(this);
}



// #########		 Crawling:.\Beam.js		#########
"use strict";

function Beam(){

	this.create = function(){
		// #########################################################
		// Misc considerations
		this.eclass 			= "A";
		this.minbarspacing		= undefined;
		// #########################################################
		// Reinforcement considerations
		this.reo = [
			{number:2, diameter:10, area:156, depth:25+10+10/2		},
			{number:2, diameter:10, area:200, depth:600-25-10-10/2	},
		];
		this.df		= 10;
		// #########################################################
		// Geometric considerations
		this.b		= 300;
		this.D		= 600;
		this.cover	= 25;
		this.Ln		= 3000;
		// #########################################################
		// Material considerations
		this.fc		= 32;
		this.Ec		= undefined;
		this.epsiloncmax = 0.003;// TODO: getcorrect code ref. AS3600 8.1.3??
		this.rhoc	= 2400;
		// AS4671 500MPa Steel && AS3600
		this.fsy = 500;// Steel characteristic yield stress: MPa
		// AS3600 3.2.2 taken to be (or determined by test)
		// TODO: add Es to variable inputs (commit with35mins)
		this.Es = 200000;// Steel Young's modulus of elasticity: MPa
		this.epsilonsy = this.fsy/this.Es; // 0.0025 or there-abouts
	}.bind(this);
	// #############################################################################
	// ### CODE COMPLIANCE CHECKERS HELPER FUNCTIONS ###############################
	// #############################################################################	
	// TODO: is_deep_beam ?
	// #############################################################################
	// ### SERVICEABILITY LIMITS ###################################################
	// #############################################################################	
	// TODO:
	// #############################################################################
	// ### GEOMETRIC HELPER FUNCTIONS ##############################################
	// #############################################################################

	Object.defineProperty(this,"innerWidth",{

		get:function innerWidth(){
			return this.b - 2*(this.cover+this.df);
		}.bind(this)}

	);

	this.get_tension_reo = function(){
		console.warn("check this function before use")
		var result = [];
		var dn = this.dn ;

		for(var i = 0; i < this.reo.length;i++){

			if(this.layer_strain_from_layer_dn(this.reo[i], dn)>0){
				result.push(this.reo[i]);
			}

		}

		return result;
	}.bind(this);

	this.get_compression_reo = function(){
		console.warn("check this function before use")
		var result = [];
		var dn = this.dn ;

		for(var i = 0; i < this.reo.length;i++){

			if(this.layer_strain_from_layer_dn(this.reo[i], dn)<0){
				result.push(this.reo[i]);
			}

		}

		return result;
	}.bind(this);
	// #############################################################################
	// ### HIGH LEVEL CAPACITY FUNCTIONS ###########################################
	// #############################################################################

	Object.defineProperty(this,"Muo",{

		get:function Muo(){
			var dn		= this.dn;
			var cc		= this.Cc_from_dn(dn);
			var ccd		= this.Cc_centroid_depth_from_dn(dn);
			var ts		= this.Ts_from_dn(dn);
			var tsd		= this.Ts_centroid_depth_from_dn(dn);
			var cs		= this.Cs_from_dn(dn);
			var csd		= this.Cs_centroid_depth_from_dn(dn);
			return (cc*ccd + ts*tsd + (cs*csd || 0)) / 1000; //kNm
		}.bind(this)}

	);
	// AS3600 8.1.6.1(1)

	Object.defineProperty(this,"Muo_min",{

		get:function(){
			// no prestress only.
			return 1.2*this.Ze*this.fctf/1000000; //mm^3*MPa => Nmm /1000/1000 => kNm
		}.bind(this)}

	);
	// AS3600 8.1.6.1(2)

	Object.defineProperty(this,"Muo_min_Ast_min",{

		get:function(){
			// rect sections only
			// TODO: fix this probalem:
			//console.warn("Check this function before use. 'd' may be wrong here. Using Ts_centroid_depth instead");
			return 0.2*Math.pow(  this.D/this.Ts_centroid_depth   ,2)*this.fctf/this.fsy*this.b*this.Ts_centroid_depth;
		}.bind(this)}

	);
	// TODO: create a proper getter for d, ku and kuo

	Object.defineProperty(this,"dn",{

		get:function(){
			// TODO: make a beam flag to determine whether compression steel is considered in this calculation.
			// TODO: make a check to see that reo that is too small is never fed into this beam calculator
			var dn;
			var top = this.D;
			var bot = 0;
			var diff;
			var cnt = 0;

			do{
				dn = (top+bot)/2;
				diff = this.Ts_from_dn(dn)+this.Cs_from_dn(dn)+this.Cc_from_dn(dn);

				if(diff>0){
					bot = dn;

				}else{
					top = dn;
				}

				cnt++
			}while(Math.abs(diff) > 0.0001 && cnt<20);
			return dn;
		}.bind(this)
	});
	// #############################################################################
	// ### GET TOTAL FORCES ########################################################
	// #############################################################################

	Object.defineProperty(this,"Ts",{get:function(){
		return this.Ts_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cs",{get:function(){
		return this.Cs_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cc",{get:function(){
		return this.Cc_from_dn(this.dn);
	}.bind(this)});

	this.Ts_from_dn = function(dn){
		return this.Fs_from_dn_tension(dn,true);
	}.bind(this);

	this.Cs_from_dn = function(dn){
		return this.Fs_from_dn_tension(dn,false);
	}.bind(this);

	this.Cc_from_dn = function(dn){
		return -(this.b*dn*this.gamma) * (this.fc*this.alpha2)/1000; // kN
	}.bind(this);

	this.Fs_from_dn_tension = function(dn, returntension){
		var result = 0;
		var epsilonsi;

		for(var i = 0;i<this.reo.length;i++){
			// First get strain in the steel layer according to similar triangles:
			epsilonsi = this.epsiloncmax/dn*(this.reo[i].depth - dn);
			// Limit the strain to a range of -0.0025 to 0.0025

			if(returntension){
				epsilonsi = Math.max(0, Math.min(epsilonsi, this.epsilonsy));

			}else{
				epsilonsi = Math.max(-this.epsilonsy, Math.min(epsilonsi, 0));
			}

			result += this.reo[i].area * this.Es * epsilonsi/1000; // kN
		}

		return result;
	}.bind(this);
	// #############################################################################
	// ### GET FORCE CENTROIDS #####################################################
	// #############################################################################
	// TODO: Which layers of steel should be disregarded? Surely steel 'close' to the centroid should be left out.

	Object.defineProperty(this,"Ts_centroid_depth",{get:function(){
		return this.Ts_centroid_depth_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cs_centroid_depth",{get:function(){
		return this.Cs_centroid_depth_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Cc_centroid_depth",{get:function(){
		return this.Cc_centroid_depth_from_dn(this.dn)
	}.bind(this)});

	this.Ts_centroid_depth_from_dn = function(dn){
		return this.Fs_centroid_from_dn_tension(dn, true);
	}.bind(this);

	this.Cs_centroid_depth_from_dn = function(dn){
		return this.Fs_centroid_from_dn_tension(dn, false);
	}.bind(this);

	this.Cc_centroid_depth_from_dn = function(dn){
		return this.gamma * dn / 2;
	}.bind(this);

	this.Fs_centroid_from_dn_tension = function(dn, returntension){
		var epsilonsi;
		var sum_area = 0;
		var sum_area_times_depth = 0;

		for(var i = 0;i<this.reo.length;i++){
			// First get strain in the steel layer according to similar triangles:
			epsilonsi = this.epsiloncmax/dn*(this.reo[i].depth - dn);
			// Then depending on if we are looking for tension or compression steel, get weighted average depth

			if(  (returntension && epsilonsi>0)  ||  (!returntension && epsilonsi<0)  ){
				sum_area += this.reo[i].area;
				sum_area_times_depth += this.reo[i].area * this.reo[i].depth;
			}

		}

		return sum_area_times_depth/sum_area || undefined;
	}.bind(this);
	// #############################################################################
	// ### GET INDIVIDUAL STEEL FORCES #############################################
	// #############################################################################

	this.layer_strain_from_layer_dn = function(layer,dn){
		// First get strain in the steel layer according to similar triangles:
		var epsilonsi = this.epsiloncmax/dn*(layer.depth - dn);
		// Limit the strain to a range of -0.0025 to 0.0025
		// (The stress does not increase after yielding at fsy)
		epsilonsi = Math.max(-this.epsilonsy, Math.min(epsilonsi, this.epsilonsy));
		return epsilonsi
	}.bind(this);

	this.layer_force_from_layer_dn = function(layer,dn){
		var layer_strain = this.layer_strain_from_layer_dn(layer,dn);
		return layer.area * this.Es * layer_strain/1000; // kN
	}.bind(this);

	this.layer_yielded_from_layer_dn = function(layer,dn){
		var layer_strain = this.layer_strain_from_layer_dn(layer, dn);
		return layer_strain<=-0.0025 || layer_strain>=0.0025;
	}.bind(this);
	// #############################################################################
	// ### GET STEEL AREAS #########################################################
	// #############################################################################

	Object.defineProperty(this,"Ast",{get:function(){
		return this.Ast_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Asc",{get:function(){
		return this.Asc_from_dn(this.dn);
	}.bind(this)});

	Object.defineProperty(this,"Acc",{get:function(){
		return this.gamma*this.dn*this.b;
	}.bind(this)});

	this.Ast_from_dn = function(dn){
		return this.As_from_dn_tension(dn,true);
	}.bind(this);

	this.Asc_from_dn = function(dn){
		return this.As_from_dn_tension(dn,false);
	}.bind(this);

	this.As_from_dn_tension = function(dn, returntension){
		var epsilonsi;
		var sum_area = 0;

		for(var i = 0;i<this.reo.length;i++){
			// First get strain in the steel layer according to similar triangles:
			epsilonsi = this.epsiloncmax/dn*(this.reo[i].depth - dn);
			// Then depending on if we are looking for tension or compression steel, get weighted average depth

			if(  (returntension && epsilonsi>0)  ||  (!returntension && epsilonsi<0)  ){
				sum_area += this.reo[i].area;
			}

		}

		return sum_area || undefined;
	}.bind(this);
	// ########################################################################
	// #### MISC COEFICIENTS ##################################################
	// ########################################################################

	Object.defineProperty(this,"gamma",{get:function(){
		var r1 = 1.05-this.fc*0.007;
		var r2 = Math.max(0.67,Math.min(0.85,r1)) 
		return r2;
	}.bind(this)});

	Object.defineProperty(this,"alpha2",{get:function(){
		var r1 = 1-this.fc*0.003
		var r2 = Math.max(0.67,Math.min(0.85,r1));
		return r2;
	}.bind(this)});
	// TODO: note that this is only when no better info is avaliable.
	// TODO: sort

	Object.defineProperty(this,"fctf",{get:function(){
		return 0.6*Math.sqrt(this.fc);
	}.bind(this)});
	// ########################################################################
	// #### SECTION PROPERTIES ################################################
	// ########################################################################

	Object.defineProperty(this,"Ze",{get:function(){
		// Rectangular section only
		return this.b*Math.pow(this.D,2)/6;
	}.bind(this)});

	Object.defineProperty(this,"Ixx",{get:function(){
		// Rectangular section only
		return this.b*Math.pow(this.D,3)/12;
	}.bind(this)});
	// STARTOFF: 4:35 14 04 14

	this.toString = function(){
		return JSON.stringify(this).replace(/,/g,",\n");
	}.bind(this);

	Object.defineProperty(this,"Ag",{get:function(){
		// Rectangular section only
		return this.b*this.D;
	}.bind(this)});
	// TODO: sort
	// Reo ratio

	Object.defineProperty(this,"p",{get:function(){
		// rect section only
		return this.Ast/this.b/this.D;
	}.bind(this)});
	// AS3600 8.5.3.1

	Object.defineProperty(this,"beta",{get:function(){
		// rect section only
		return this.Ast/this.b/this.D;
	}.bind(this)});
	this.create();
	/*
	*/
};



// #########		 Crawling:.\varinput.js		#########



// #########		 Crawling:.\EventDispatcher.js		#########
/**
 * This mixin is used to lend primative event management to another class. The maintenance of this class is important!
 * @class EventDispatcher
 * @example
 * 	var ev = new EventDispatcher();

 * 	ev.on("run",function(e){
 * 		console.log(e);
 * 	});
 */

function EventDispatcher() {
	"use strict";
 /**
	 * This is set automotically when the mixin is instantiated. It is used to prevent repeated instantiation.
	 * @property isEventDispatcher
	 * @private
	 */

	if(this.__isEventDispatcher == true){
		return;
	}

	this.__isEventDispatcher = true;
	/**
	 * Used as an internal dictionary to relate event names to event functions.
	 * @property events
	 * @type {Object}

	 */
	this.__events = {};
	/**
	 * @method on
	 * @param EventName {String}

	 * @param ListenerFunction {String}

	 */

	this.on = (function (eventName, eventFunction) {

		if (typeof eventName !== "string" || typeof eventFunction !== "function") {
			console.log("Invalid event registration, " + eventName);
			return;
		}


		if (this.__events[eventName] === undefined) {
			this.__events[eventName] = [];
		}

		this.__events[eventName].push(eventFunction);
	}).bind(this);
	/**
	 * @method clearListeners
	 * @param EventName {String}

	 */

	this.clearListeners = (function (eventName) {

		if (this.__events[eventName] !== undefined) {
			this.__events[eventName] = [];
		}

	}).bind(this);
	/**
	 * If the event name is unknown, this method will fail quietly, like a fish.
	 * @method dispatch
	 * @param EventName {String}

	 * @param EventData {Any}

	 */

	this.dispatch = function (eventName, eventData) {

		if (this.__events[eventName] !== undefined) {

			for (var i = 0; i < this.__events[eventName].length; i++) {
				this.__events[eventName][i](eventData);
			}


		} else {
			//fail quietly, like a fish.
		}

	}.bind(this);
}

function VarInput(arg_id,arg_notation,arg_type,arg_value,arg_unit,arg_href,arg_target,arg_options){
	EventDispatcher.call(this);
	this._options = arg_options;
	this._notation = "";
	this._type = arg_type;
	this.validate = function(v){return v;};
	// ##########################################################################################
	// 			BUILD INTERFACE
	// ##########################################################################################

	this.buildInterface = function(){
		this.body = document.createElement("table");
		this.row = document.createElement("tr");
		this.body.className = "varinput";
		this.notationDiv = document.createElement("td");
		this.notationDiv.className = "notation-div";
		this.valueDiv = document.createElement("td");
		this.valueDiv.className = "value-div";
		this.unitDiv = document.createElement("td");
		this.unitDiv.className = "unit-div";
		this.notationAnchor = document.createElement("a");

		if(arg_options){
			this.valueInput	= document.createElement("select");
			this.options 		= arg_options;

		}else if(arg_type == "number"){
			this.valueInput		= document.createElement("input");
			this.valueInput.type = "number";

		}else if(arg_type == "text"){
			this.valueInput		= document.createElement("input");
			this.valueInput.type = "text";

		}else{
			this.valueInput		= document.createElement("input");
			this.valueInput.type = "none";
			this.valueInput.readonly=true;
		}

		this.valueDiv.appendChild(this.valueInput);
		this.notationDiv.appendChild(this.notationAnchor);
		this.row.appendChild(this.notationDiv);
		this.row.appendChild(this.valueDiv);
		this.row.appendChild(this.unitDiv);
		this.body.appendChild(this.row);
		this.notation	= arg_notation;
		this.href		= arg_href;
		this.target		= arg_target;
		this.id		= arg_id
		this.unit	= arg_unit;
		this.value	= arg_value;
		this.notationAnchor.tabIndex=-1;
	}.bind(this);
	// ##########################################################################################
	// 			EVENT LISTENERS
	// ##########################################################################################

	this.configureEvents = function(){

		this.valueInput.addEventListener("change",function(e){
			var val = {value:this.value, error:[], warning:[], info:[]};
			val = this.validate(val);
			this.value = val.value;

			if(val.error.length>0){
				this.valueInput.setCustomValidity("NO")
			}

			this.update();
			this.change();
		}.bind(this));

		this.valueInput.addEventListener("input",function(e){
			var val = {value:this.value, error:[], warning:[], info:[]};
			val = this.validate(val);

			if(val.error.length>0){
				this.valueInput.setCustomValidity("NO")
			}

			this.update();
			this.change();
		}.bind(this));

		this.body.addEventListener("click", function(e){

			if(e.target.tagName!=="INPUT" && e.target.tagName!=="SELECT"){
				//e.preventDefault();
				this.notationAnchor.click();

				if(this.valueInput.tagName == "SELECT"){
					this.valueInput.focus();

				}else{
					this.valueInput.select();
				}

			}

			this.update();
			this.change();
		}.bind(this))
	}.bind(this);

	this.update = function(){
		this.dispatch("update",this);
	}.bind(this);

	this.change = function(){
		this.dispatch("change",this);
	}.bind(this);
	// ##########################################################################################
	// 			HELPER FUNCTIONS
	// ##########################################################################################

	this.appendTo = function(dom){
		dom.appendChild(this.body)
		this.updateMathJax();
		this.configureEvents();
	}.bind(this);

	this.updateMathJax = function(){

		if(document.body.contains(this.body)){

			try{
				MathJax.Hub.Queue(["Typeset",MathJax.Hub,this.body]);

			}catch(e){
				this.notation = this.id;
				// Fail gracefully sort of
			}

		}

	}.bind(this);
	// ##########################################################################################
	// 			GETTERS AND SETTERS
	// ##########################################################################################

	Object.defineProperty(this,"notation",{

		get:function(){
			this._notation;
		}.bind(this),

		set:function(newval){
			this.notationAnchor.innerHTML	= newval;
			this.updateMathJax();
		}.bind(this)
	});

	Object.defineProperty(this,"target",{

		get:function(){
			this.notationAnchor.target;
		}.bind(this),

		set:function(newval){
			this.notationAnchor.target	= newval;
		}.bind(this)
	});

	Object.defineProperty(this,"href",{

		get:function(){
			this.notationAnchor.href;
		}.bind(this),

		set:function(newval){
			this.notationAnchor.href	= newval;
		}.bind(this)
	});

	Object.defineProperty(this,"value",{

		get:function(){

			if(this._type == "number"){
				return parseInt(this.valueInput.value);
			}

			return this.valueInput.value;
		}.bind(this),

		set:function(newval){
			this.valueInput.value = newval;
		}.bind(this)
	});

	Object.defineProperty(this,"options",{

		get:function(){
			return this._options;
		}.bind(this),

		set:function(newval){
			this._options = newval;

			for(var i=0;i<this._options.length;i++){
				var o = document.createElement("option");
				o.innerHTML = this._options[i];
				this.valueInput.appendChild(o);
			}

		}.bind(this),
	});

	Object.defineProperty(this,"unit",{

		get:function(){
			this.unitDiv.innerHTML;
		}.bind(this),

		set:function(newval){
			this.unitDiv.innerHTML = newval;
		}.bind(this)
	});
	this.buildInterface();
}




// #########		 Crawling:.\setup_varinputs.js		#########
var vin = {};
vin.Ln     = new VarInput('Ln' , "$$$L_n$$$" , "number" , 4000, "mm", "infos/Ln.htm", "varinfoiframe");
vin.b      = new VarInput('b' , "$$$b$$$" , "number" , 300, "mm", "infos/b.htm", "varinfoiframe");
vin.D      = new VarInput('D' , "$$$D$$$" , "number" , 600, "mm", "infos/D.htm", "varinfoiframe");
vin.cover  = new VarInput('cover' , "$$$\\text{Cover}$$$" , "number" , 25, "mm", "infos/cover.htm", "varinfoiframe");
vin.eclass = new VarInput('eclass' , "$$$\\text{E. Class}$$$" , "text" , "A1", "", "infos/eclass.htm", "varinfoiframe",["A1","A2","B1","B2","C1","C2"]);
vin.df     = new VarInput('df' , "$$$d_f$$$" , "number" , 10, "mm", "infos/df.htm", "varinfoiframe",[10, 12, 16, 20, 24, 28, 32, 36, 40]);
vin.rhoc   = new VarInput('rhoc', "$$$\\rho_c$$$" , "number" , 2400, "kg/m&#179;", "infos/rhoc.htm", "varinfoiframe");
vin.fc     = new VarInput('fc' , "$$$f_c$$$" , "number" , 32, "MPa", "infos/fc.htm", "varinfoiframe",[20, 25, 32, 40, 50, 65, 80, 100]);
vin.Ln

vin.b.validate = function(e){
	//var e = {value:this.value, error:[], warning:[], info:[]};

	if(e.value%5!==0){
		e.error.push("b should be a rounded to the nearest 5mm");
	}


	if(e.value<100){
		e.value=100;
	}


	if(e.value>3000){
		e.value=3000;
	}

	return e;
}




// #########		 Crawling:.\validation.js		#########

function DoValidation(){
	return
	var error_list = []
	var warning_list = []
	var Ln = document.getElementById("Ln");
	var D = document.getElementById("D");
	var b = document.getElementById("b");
	var cover = document.getElementById("cover");
	var eclass = document.getElementById("eclass");
	var fc = document.getElementById("fc");
	Ln.setCustomValidity("");
	D.setCustomValidity("");
	b.setCustomValidity("");
	cover.setCustomValidity("");
	eclass.setCustomValidity("");
	fc.setCustomValidity("");
	/** Ln
				too short
				too long
				span/depth ratio
	**/

	if(Ln.integerValue<500){
		error_list.push("Ln<500mm. This is too short to be considered a beam.");
		Ln.setCustomValidity("Ln too short.");

	}else if(Ln.integerValue<1000){
		warning_list.push("Ln<1000mm. This may be a bit short for the type of analysis used in this software.");
		//Ln.setCustomValidity("Ln too short.");

	}else if(Ln.integerValue>15000 && Ln.integerValue<25000){
		warning_list.push("Ln>15m. This is pretty long for a clear-span. Consider some columns!");
		//Ln.setCustomValidity("Ln too long.");

	}else if(Ln.integerValue>=25000){
		error_list.push("Ln>25m. This is too long for a clear-span. Columns would be needed.");
		Ln.setCustomValidity("Ln too long.");
	}

	// AS3600 8.5 - deflection span to depth ratio limits
	// TODO: confirm these values
	var span_to_depth = (Ln.integerValue/D.integerValue);

	if(span_to_depth>10){
		error_list.push("Ln/D =  "+span_to_depth.toFixed(1)+" (>10) This is a very small span to depth ratio. D should be more than "+(Math.ceil(Ln.integerValue/10/10)*10).toFixed(0)+"mm");
		Ln.setCustomValidity("Ln/D too small.");
		D.setCustomValidity("Ln/D too small.");

	}else if(span_to_depth<0.25 && Ln.integerValue!==0){
		error_list.push("Ln/D =  "+span_to_depth.toFixed(2)+" (< 0.25) This is a very low span on depth ratio. D should be less than "+(Math.ceil(Ln.integerValue/0.25/10)*10).toFixed(0)+"mm This software does not support 'deep' beams [See AS3600 Section 12 - Non Fexural members]");
		Ln.setCustomValidity("Ln/D too high.");
		D.setCustomValidity("Ln/D too high.");
	}

	/** b
				minimum: 200 - arbitrary
				maxumum: 5000 - arbitrary
				underasonably large: 1500??
				breadth/depth ratio: ?? slab vs deep beam
				reasonabled multiple
	**/
	// TODO: confirm these values of bread/depth
	var breadth_on_depth = b.integerValue/D.integerValue;

	if(breadth_on_depth>5 && D.integerValue<300){
		error_list.push("b/D =  "+breadth_on_depth.toFixed(1)+" (> 5) This looks more like a slab than a beam. This software does not support slabs. [See AS3600 Section 9]");
		b.setCustomValidity("b/D looks like slab.");
		D.setCustomValidity("b/D looks like slab.");
	}

	// TODO: verify this bs

	if(breadth_on_depth<0.2){
		error_list.push("b/D =  "+breadth_on_depth.toFixed(1)+" (< 0.2) This looks more like a wall than a beam. The b should be greater than "+(Math.ceil(0.2*D.integerValue/10)*10).toFixed(0));
		b.setCustomValidity("b/D looks like slab.");
		D.setCustomValidity("b/D looks like slab.");
	}


	if(b.integerValue<200){
		error_list.push("b<200mm. This is not wide enough to be a beam.");
		b.setCustomValidity("Not wide enough");

	}else if(b.integerValue>1500 && b.integerValue<3000){
		warning_list.push("b>1500mm. This is probably a bit too wide for a beam.");

	}else if(b.integerValue>=2500){
		error_list.push("b>3000mm. This is too wide to be designed as a normal beam.");
		b.setCustomValidity("Too wide");
	}


	if(b.integerValue%5!==0){
		warning_list.push("b should be rounded to the nearest 5mm. Construction tollerances are not milimeter accurate.");
	}

	/** D
				minimum: 200 - arbitrary
				maxumum: 3000 - arbitrary
				reasonabled multiple
				underasonably large: 2000??
				deep beam limitation: ??
				breadth/depth ratio: (see above)
				span/depth ratio:	(see above)
	**/
	// TODO: check the

	if(D.integerValue<200){
		error_list.push("D<200mm. This is too shallow for a beam.");
		D.setCustomValidity("Too shallow");

	}else if(D.integerValue<300){
		warning_list.push("D<300mm. This is probably a bit shallow for a beam.");

	}else if(D.integerValue>2000 && D.integerValue<3000){
		warning_list.push("D>2000mm. This is probably a bit too deep for a beam.");

	}else if(D.integerValue>=3000){
		error_list.push("D>3000mm. This is too deep to be designed as a normal beam.");
		D.setCustomValidity("Too deep");
	}


	if(D.integerValue%5!==0){
		warning_list.push("D should be rounded to the nearest 5mm.  Construction tollerances are not milimeter accurate.");
	}

	/** cover
				match with eclass 4.10.3.2
				resonable multiple
				not too big ?? how big is too big?
				not too small
	**/

	if(cover.integerValue<25){

	}if(cover.integerValue<25){
	}


	if(cover.integerValue%5!==0){
		warning_list.push("Cover should be rounded to the nearest 5mm.  Construction tollerances are not milimeter accurate.");
	}

	/** eclass
				match with cover fromt able
				chosen from list
				matches f'c accroding to Table 4.4
	**/
	var class_index = [
		"A1",
		"A2",
		"B1",
		"B2",
		"C1",
		"C2"
	];
	var fc_index = 	[20,25,32,40,50];
	var coverdata_standard = [ // AS3600+A2 T4.10.3.2
		[20,20,20,20,20],
		[  ,30,25,20,20],
		[  ,  ,40,30,25],
		[  ,  ,  ,45,35],
		[  ,  ,  ,  ,50],
		[  ,  ,  ,  ,65]
	];
	var coverdata_nonstandard = [ // AS3600+A2 T4.10.3.3
		[20,20,20,20,20],
		[  ,30,20,20,20],
		[  ,  ,30,25,20],
		[  ,  ,  ,35,25],
		[  ,  ,  ,  ,45],
		[  ,  ,  ,  ,60]
	];
	// find standard cover requirement:

	for(var fc_index_i=0;fc_index_i<fc_index.length-1;fc_index_i++){

		if(fc.integerValue>=fc_index[fc_index_i] && fc.integerValue<fc_index[fc_index_i+1]){
			break;
		}

	}

	var standard_min_cover 		= coverdata_standard[class_index.indexOf(eclass.textValue)][fc_index_i];
	var nonstandard_min_cover	= coverdata_nonstandard[class_index.indexOf(eclass.textValue)][fc_index_i];

	if(standard_min_cover === undefined){
		requed_fc = fc_index_i;

		while(coverdata_standard[class_index.indexOf(eclass.textValue)][requed_fc] === undefined){
			requed_fc++;
		}

		error_list.push("f'c insufficient for Exposure classification without special considerations. Increase f'c to "+fc_index[requed_fc]+"MPa. See AS3600 Table 4.10.3.2 and Table 4.10.3.3");
		fc.setCustomValidity("Mismatch with eclass.");
		eclass.setCustomValidity("Mismatch with cover.");

	}else	if(cover.integerValue<standard_min_cover){
		error_list.push("Cover insufficient for f'c and Exposure classification without special considerations. Increase cover to "+standard_min_cover+"mm. See AS3600 Table 4.10.3.2 and Table 4.10.3.3");
		// TODO: or increase f_c to ^^
		cover.setCustomValidity("Insufficint for fc and eclass");
		eclass.setCustomValidity("Mismatch with cover.");
	}

	// TODO: more and less buttons still dont work.
	// Slab recognition doesnt really work too well.
	/** df
				chosen from list
	**/
	/** rhoc
				resonable multiple
				within perscribed range
	**/
	/** REO
				second row of reo on wide shallow beams is stupid
	**/
	var ebar = document.querySelector("#invardiverrorbar");
	ebar.innerHTML = "";

	if(error_list.length>0){
		ebar.innerHTML += '<ul class="errorlist"><li>'+error_list.join("</li><li>")+'</li></ul>';
	}


	if(warning_list.length>0){
		ebar.innerHTML += '<ul class="warninglist"><li>'+warning_list.join("</li><li>")+'</li></ul>';
	}

}



// #########		 Crawling:.\reoinput.js		#########

function ReoInput(){
	EventDispatcher.call(this);
	this.diameters	= [10,	12,		16,		20,		24,		28,		32,		36,		40];
	this.areas		= [78,	113,	201,	314,	452,	616,	804,	1020,	1260];
	this.masses		= [0.632,0.910,1.619,2.528,3.640,4.955,6.471,8.910,10.112];

	this.create = function(){
		this.body = document.createElement("tr");
		this.body.className = "reoinput";
		this.body.innerHTML = 
		'<td><input type="checkbox" class="enabled"></td>\
		<td><input class="barcode" required value="2N10"\></td>\
		<td><button class="more" tabindex="-1">+</button><button class="less" tabindex="-1">-</button></td>\
		<td class="area">--</td>\
		<td><input type="number" class="offset" value="0" required/></td>\
		<td><select class="from"><option>lowest</option><option>highest</option></select></td>\
		<td><input type="checkbox" class="selected"/></td>';
		this.enabledCheckbox = this.body.querySelector(".enabled");
		this.barcodeInput = this.body.querySelector(".barcode");
		this.moreButton = this.body.querySelector(".more");
		this.lessButton = this.body.querySelector(".less");
		this.areaOutput = this.body.querySelector(".area");
		this.offsetInput = this.body.querySelector(".offset");
		this.fromInput = this.body.querySelector(".from");
		this.selectedCheckbox = this.body.querySelector(".selected");
		this.enabled = false;
	}.bind(this);
	// ##########################################################################################
	// 			BIND EVENTS
	// ##########################################################################################

	this.appendTo = function(dom){
		dom.appendChild(this.body);

		this.enabledCheckbox.addEventListener("change",function(e){
			this.enabled = this.enabledCheckbox.checked;
			this.change();
		}.bind(this));

		this.selectedCheckbox.addEventListener("change",function(e){
			this.selected = this.selectedCheckbox.checked;
			this.change();
		}.bind(this));

		this.moreButton.addEventListener("click",function(){
			this.more();
			this.update();
			this.change();
		}.bind(this));

		this.lessButton.addEventListener("click",function(){
			this.less();
			this.update();
			this.change();
		}.bind(this));
		// BARCODE CHANGE EVENT LISTENERs

		this.barcodeInput.addEventListener("keydown",function(e){
			if(e.keyCode == 38){	// up button
				this.more();
				e.preventDefault();
				this.update();
				this.change();
			}

			if(e.keyCode == 40){	// down button
				this.less();
				e.preventDefault();
				this.update();
				this.change();
			}

		}.bind(this))

		this.barcodeInput.addEventListener("change",function(){
			this.update();
			this.change();
		}.bind(this));

		this.barcodeInput.addEventListener("input",function(e){
			var val = e.target.value;
			var ss = e.target.selectionStart;
			var se = e.target.selectionEnd;
			var arr = val.split("")
			var flag = false;
			var noN = true;

			for(var i=0;i<arr.length;i++){

				if((/[^0-9nN]/).test(arr[i])){
					arr.splice(i--,1);
					;

					if(i<ss){
						ss--;
						se=ss;
					}

				}


				if(arr[i]=="N"){
					noN = false;
				}

			}

			val = arr.join("");
			val = val.toUpperCase();
			e.target.value =  val;
			e.target.setSelectionRange(ss,se);
			this.update();
			this.change();
		}.bind(this))
	}.bind(this);
	// ##########################################################################################
	// 			GETTER/SETTERS
	// ##########################################################################################
	//				GET/SET ENABLED

	Object.defineProperty(this,"enabled",{

		get:function(){
			return this.enabledCheckbox.checked;
		}.bind(this),

		set:function(newval){
			this.enabledCheckbox.checked = newval;

			if(newval == true){
				this.body.style.color = "";

			}else if(newval == false){
				this.body.style.color = "grey";
				this.selected = false;
			}

			this.barcodeInput.disabled		= !newval;
			this.moreButton.disabled		= !newval;
			this.lessButton.disabled		= !newval;
			this.areaOutput.disabled		= !newval;
			this.offsetInput.disabled		= !newval;
			this.fromInput.disabled			= !newval;
			this.selectedCheckbox.disabled= !newval;
			this.update();
		}.bind(this),
	});
	//				GET/SET SELECTED

	Object.defineProperty(this,"selected",{

		get:function(){
			return this.selectedCheckbox.checked;
		}.bind(this),

		set:function(newval){
			this.selectedCheckbox.checked = newval;
			this.update();
		}.bind(this),
	});
	// 			GET/SET barcode

	Object.defineProperty(this,"barcode",{

		get:function(){
			return this.barcodeInput.value;
		}.bind(this),

		set:function(newval){
			this.barcodeInput.value = newval;
			this.update();
		}.bind(this),
	});
	// 			GET/SET area

	Object.defineProperty(this,"area",{

		get:function(){
			return this.areas[this.diameters.indexOf(this.diameter)]*this.number || undefined;
		}.bind(this)
	});
	// 			GET/SET mass_per_meter

	Object.defineProperty(this,"mass_per_meter",{

		get:function(){
			return this.masses[this.diameters.indexOf(this.diameter)]*this.number || undefined;
		}.bind(this)
	});
	// 			GET/SET diameter

	Object.defineProperty(this,"diameter",{

		get:function(){
			return parseInt(this.barcode.split("N")[1]) || undefined;
		}.bind(this),

		set:function(newval){

			if(this.diameters.indexOf(newval)!==-1){
				this.barcode = this.number + "N" + newval;

			}else{
				console.warn("Invalid assignment to reo-input diameter: "+newval);
			}

		}.bind(this)
	});
	// 			GET/SET number

	Object.defineProperty(this,"number",{

		get:function(){
			return parseInt(this.barcode.split("N")[0]);
		}.bind(this),

		set:function(newval){

			if(typeof newval == "number" && newval!==NaN && newval!==undefined && newval>=2 && newval<100){
				this.barcode = newval + "N" + this.diameter;

			}else{
				console.warn("Invalid assignment to reo-input number: "+newval);
			}

		}.bind(this)
	});
	// 			GET/SET OFFSET

	Object.defineProperty(this,"offset",{

		get:function(){
			return parseInt(this.offsetInput.value);
		}.bind(this),

		set:function(newval){
			this.offsetInput.value = Math.abs(Math.round(parseFloat(newval)));
			this.update();
		}.bind(this),
	});
	// 			GET/SET FROM

	Object.defineProperty(this,"from",{

		get:function(){
			return this.fromInput.value;
		}.bind(this),

		set:function(newval){
			this.fromInput.value = newval;
			this.update();
		}.bind(this),
	});
	// ##########################################################################################
	// 			UPDATE
	// ##########################################################################################

	this.update = function(){
		this.areaOutput.innerHTML = this.area || "--";
		this.dispatch("update",this);
	}.bind(this);

	this.change = function(){
		this.dispatch("change",this);
	}.bind(this);
	// ##########################################################################################
	// 			HELPERS
	// ##########################################################################################

	this.makeFirstRow = function(){
		this.enabled = true;
		this.enabledCheckbox.disabled = true;
		this.offsetInput.disabled = true;
		this.fromInput.disabled = true;
		this.offsetInput.style.visibility = "hidden";
		this.fromInput.style.visibility = "hidden";
	}.bind(this);
	// ##########################################################################################
	// 			MORE AND LESS HELPER FUNCTIONS
	// ##########################################################################################

	this.more = function(){
		var b = parseInt(vin.b.value);
		var D = parseInt(vin.D.value);
		var df = parseInt(vin.df.value);
		var cover = parseInt(vin.cover.value);
		var fitwidth = b-2*cover-2*df;
		var manager = this.manager;
		if(manager.getBottomRow()===this || manager.getTopmostTop()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
			// TODO: assume minimum spacing of 20mm between
			// TODO: assume maximum spacing of 300mm c-c
			// TODO: assume maximum of 10 bars
			this.barcode = this._more_less_barcode(true, 10, 300, 20, fitwidth, this.area) || this.barcode;

		}else{
			// TODO: assume maximum of 2 bars
			this.barcode = this._more_less_barcode(true, 2,  300, 20, fitwidth, this.area) || this.barcode;
		}

	}.bind(this);

	this.less = function(){
		var b = parseInt(vin.b.value);
		var D = parseInt(vin.D.value);
		var df = parseInt(vin.df.value);
		var cover = parseInt(vin.cover.value);
		var fitwidth = b-2*cover-2*df;
		var manager = this.manager;
		if(manager.getBottomRow()===this || manager.getTopmostTop()===this){// TODO: or if the row is pressed against the top allow multi bars of comp reo.
			// TODO: assume minimum spacing of 20mm between
			// TODO: assume maximum spacing of 300mm c-c
			// TODO: assume maximum of 10 bars
			this.barcode = this._more_less_barcode(false, 10, 300, 20, fitwidth, this.area) || this.barcode;

		}else{
			// TODO: assume maximum of 2 bars
			this.barcode = this._more_less_barcode(false, 2,  300, 20, fitwidth, this.area) || this.barcode;
		}

	}.bind(this);

	this._more_less_barcode = function (getmore, maxbar, max_spacing, min_gap, fitwidth, current_area){
		var combs = [];
		var num,dia,diai,minw,maxw;

		for(num = 2; num<=maxbar;num++){

			for(diai=0;diai<this.diameters.length;diai++){
				dia = this.diameters[diai];
				minw = dia*num+(num-1)*min_gap;
				maxw = dia*num+(num-1)*max_spacing;

				if(fitwidth>=minw && fitwidth<=maxw){
					combs.push({number:num, diameter:dia, area:this.areas[diai]*num})
				}

			}

		}


		combs.sort(function(a,b){

			if(getmore){
				return a.area-b.area;

			}else{
				return b.area-a.area;
			}

		})
		//console.table(combs);
		// go through pairwise and remove all adjacent combos within 50mm^2 of eachother where one has less bars than the other
		var da = 0;
		var dn = 0;

		for(var i = 0;i<combs.length-1;i++){
			da = Math.abs(combs[i].area - combs[i+1].area);

			if(da>50){

				if(combs[i].number<combs[i+1].number){
					combs.splice(i+1,1);

				}else if(combs[i].number>combs[i+1].number){
					combs.splice(i,1);
					i--;
				}

			}

		}

		// go through pairwise and remove all adjacent combos within 100mm^2 of eachother if one has less than or equal to half the number of bars.
		var da = 0;
		var dn = 0;

		for(var i = 0;i<combs.length-1;i++){
			da = Math.abs(combs[i].area - combs[i+1].area);

			if(da>50){

				if(combs[i].number<=combs[i+1].number/2){
					combs.splice(i+1,1);

				}else if(combs[i+1].number<=combs[i].number/2){
					combs.splice(i,1);
					i--;
				}

			}

		}

		//console.log(combs.length);

		for(var i = 0;i<combs.length;i++){

			if(getmore){

				if(combs[i].area>current_area){
					return combs[i].number+"N"+combs[i].diameter;
				}


			}else{

				if(combs[i].area<current_area){
					return combs[i].number+"N"+combs[i].diameter;
				}

			}

		}

		// no suitable combination was found. Return the top combination.
		return combs[combs.length-1].number+"N"+combs[combs.length-1].diameter;
	}.bind(this);// end _more_less_barcode
	this.create();
}



// #########		 Crawling:.\ReoManager.js		#########

function ReoManager(arg_body){
	EventDispatcher.call(this);
	this.body = arg_body;
	this.rows = [];

	this.create = function(){
		var firstrow = this.createReoInput();
		firstrow.makeFirstRow();
		this.rows.push(this.createReoInput());
		this.rows.push(this.createReoInput());
		this.rows.push(this.createReoInput());
		this.rows.push(firstrow);

		for(var i = 0;i<this.rows.length;i++){
			this.rows[i].appendTo(this.body);
		}

		this.update();
	}.bind(this);

	this.getEnabledSelectedRows = function(){
		var result = [];

		for(var i = 0;i<this.rows.length;i++){

			if(this.rows[i].enabled && this.rows[i].selected){
				result.push(this.rows[i]);
			}

		}

		return result;
	}.bind(this);

	this.getEnabledRows = function(){
		var result = [];

		for(var i = 0;i<this.rows.length;i++){

			if(this.rows[i].enabled){
				result.push(this.rows[i]);
			}

		}

		return result;
	}.bind(this);

	this.getTopmostTop = function(){
		var r = this.getEnabledRows();

		for(var i = 0;i<r.length;i++){
			// TODO: finish this and swim through the mire that is determining the order and fit of the bars.
			// LEFTOFF: 2014 04 16 23:25

			if(r[i].from==="highest"){

				if(r[i].offset===0){
					return r[i];
				}

				break;
			}

		}

		return undefined;
	}.bind(this);

	this.getBottomRow = function(){
		var r = this.getEnabledRows();
		return r[r.length-1];
	}.bind(this);

	this.getDepthOfRow = function(row){
		var D = parseInt(vin.D.value);
		var df = parseInt(vin.df.value);
		var cover = parseInt(vin.cover.value);
		var rs = this.getEnabledRows();
		var br = this.getBottomRow();
		var last_low_depth = D-cover-df;
		var last_high_depth = cover+df;

		for(var i = rs.length-1;i>=0;i--){

			if(rs[i].from === "lowest"){

				if(rs[i] === row){
					return last_low_depth - rs[i].offset - rs[i].diameter/2;

				}else{
					last_low_depth -= rs[i].offset + rs[i].diameter;
				}

			}

		}


		for(var i = 0; i<rs.length-1; i--){

			if(rs[i].from === "highest"){

				if(rs[i] === row){
					return last_high_depth + rs[i].offset + rs[i].diameter/2;

				}else{
					last_high_depth += rs[i].offset + rs[i].diameter;
				}

			}

		}

		return "ERROR";
	}.bind(this);

	this.createReoInput = function(){
		var nr = new ReoInput();
		nr.manager = this;
		console.log("fix events")
		nr.on("update",this.update);
		nr.on("change",this.change);
		return nr;
	}.bind(this);

	this.change = function(e){
		//console.log("reo-manager change");
		this.dispatch("change",this);
	}.bind(this);

	this.update = function(e){
		//console.log("reo-manager update");
		this.dispatch("update",this);
	}.bind(this);

	Object.defineProperty(this,"value",{

		get:function(){
			var result = [];
			var rs = this.getEnabledRows(); 
			var rw;

			for(var i = 0;i<rs.length;i++){

				rw = {
					number:		rs[i].number,
					diameter:	rs[i].diameter,
					area:			rs[i].area,
					depth:		this.getDepthOfRow(rs[i])
				}

				result.push(rw);
			}

			return result;
		},

		set:function(newval){
			// TODO: DESERIELIZEEEE :|
		}

	});

	Object.defineProperty(this,"selected_value",{

		get:function(){
			var result = [];
			var rs = this.getEnabledSelectedRows(); 
			var rw;

			for(var i = 0;i<rs.length;i++){

				rw = {
					number:		rs[i].number,
					diameter:	rs[i].diameter,
					area:			rs[i].area,
					depth:		this.getDepthOfRow(rs[i]),
					mass_per_meter:	rs[i].mass_per_meter,
					from:			rs[i].from,
					offset:			rs[i].offset,
				}

				result.push(rw);
			}

			return result;
		},

		set:function(newval){
			// TODO: DESERIELIZEEEE :|
		}

	});
	this.create();
};var rman = new ReoManager(document.querySelector("#reorows"));
rman.on("change",mainUpdateListener);

for(var i in vin){
	vin[i].appendTo(document.querySelector("#invardivdiv"));
	vin[i].on("change",mainUpdateListener);
}

// Create global beam object
var b = new Beam();

function intakeBeamValues(){
	b.Ln		= vin.Ln.value;
	b.b		= vin.b.value;
	b.D		= vin.D.value;
	b.cover	= vin.cover.value;
	b.eclass	= vin.eclass.value;
	b.df		= vin.df.value;
	b.rhoc	= vin.rhoc.value;
	b.fc		= vin.fc.value;
	b.reo		= rman.value;
}


function outputCalculations(){

	function f(n){

		if(typeof n == "number" && !isNaN(n)){
			return n.toFixed(0)

		}else{
			return "--"
		}

	}

	var calc = [];
	calc.push("alpha2: "	+b.alpha2.toFixed(2)		);
	calc.push("gamma: "	+b.gamma.toFixed(2)		);
	calc.push("");
	calc.push("dn: "	+f(b.dn)+" mm"		);
	calc.push("Muo: "	+f(b.Muo)+" kNm");
	calc.push("Muo min: "	+f(b.Muo_min)+" kNm");
	calc.push("Ast min (Alternative to meeting Muo_min): "	+f(b.Muo_min_Ast_min)+" mm^2");
	calc.push("");
	calc.push("Ag: "	+f(b.Ag)+" mm^2");
	calc.push("Ast: "	+f(b.Ast)+" mm^2");
	calc.push("Asc: "	+f(b.Asc)+" mm^2");
	calc.push("Acc: "	+f(b.Acc)+" mm^2");
	calc.push("Ixx: "	+f(b.Ixx)+" mm^4");
	calc.push("Ze: "	+f(b.Ze)+" mm^3");
	calc.push("Tensile reo ratio (Ast/Ag): "	+(b.p*100).toFixed(3)+"%");
	calc.push("");
	calc.push("Ts: "	+f(b.Ts)		);
	calc.push("Cs: "	+f(b.Cs)		);
	calc.push("Cc: "	+f(b.Cc)		);
	calc.push("");
	calc.push("Ts_centroid_depth: "	+ f(b.Ts_centroid_depth)		);
	calc.push("Cs_centroid_depth: "	+ f(b.Cs_centroid_depth)		);
	calc.push("Cc_centroid_depth: "	+ 	  f(b.Cc_centroid_depth)		);
	calc.push("");
	document.querySelector("#calcdivcontent").innerHTML = calc.join("<br>");
	var o = document.createElement("pre");
	o.innerHTML = "Beam Information "+JSON.stringify(b,undefined,4);
	document.querySelector("#calcdivcontent").appendChild(o);
}


function outputReoSummary(){
	// TODO: fix this bs :(
	return
	var rm = document.querySelector("reo-manager");
	var om = document.querySelector("reo-output");
	var rs = rman.selected_value;

	if(rs.length == 0){
		om.clear();
		om.oneLables();
		return;

	}else if(rs.length>1){
		om.avgLables();

	}else{
		om.oneLables();
	}

	var area = 0;
	var depth_times_area = 0;
	var number = 0;
	var length = 0;
	var mass = 0;
	var tforce = 0;

	for(var i = 0;i<rs.length;i++){
		area += rs[i].area;
		depth_times_area += rs[i].depth*rs[i].area;
		number += rs[i].number;
		length += rs[i].number*b.Ln/1000;
		mass += rs[i].number*b.Ln/1000*rs[i].mass_per_meter;
		tforce += b.layer_force_from_layer_dn(rs[i], b.dn);
	}

	// TODO: remove the "Amount:" lable and lable individualy.
	// TODO: fix output styles to prevent column resizing
	// TODO: have a current column and sum column??
	om.setIdContent("depth", (depth_times_area/area).toFixed(0) || 0);
	om.setIdContent("area", area);
	om.setIdContent("number", number);
	om.setIdContent("length", length.toFixed(1));
	om.setIdContent("mass", mass.toFixed(1));
	om.setIdContent("tforce", tforce.toFixed(1));
}

mainUpdateListener()

function mainUpdateListener(e){
	DoValidation(); // see validation.js
	intakeBeamValues();
	outputCalculations();
	outputReoSummary();
}

//###########################################################################################
//###### validation error text box ###########################################################
//###########################################################################################

function setErrorList(list){

	if(list===undefined || list.length==0){
		document.querySelector("#errortr").style.display="none";

	}else{
		document.querySelector("#errortr").style.display="";
		var out = '<h1 style="color:darkred;">Error</h1>'

		for(var i = 0;i<list.length;i++){
			out+="<p>"+list[i]+"</p>";
		}

		document.querySelector("#errortd").innerHTML = out;
	}

}

//##################################################################3
//##### Tooltips ###################################################3
//##################################################################3

setTimeout(function(){
	addTooltipTo(document.querySelector("#invardiv"),document.querySelector("#invardivtooltipbar"));
	addTooltipTo(document.querySelector("#reoinputoutputdiv"),document.querySelector("#reoinputoutputtooltipbar"));
},1500);

function addTooltipTo(d, output){
	var els = d.querySelectorAll("*");

	for(var i = 0;i<els.length;i++){

		if(els[i].webkitShadowRoot!=null){
			addTooltipTo(els[i].webkitShadowRoot, output);
			//console.log(els[i]);

		}else if(els[i].getAttribute("data-tooltip")){
			els[i].output = output;

			els[i].addEventListener("mouseover",function(e){
				var targ = e.target; 

				while(targ.getAttribute("data-tooltip")===null){
					targ=targ.parentNode;
				}

				var ttb = this.output;
				ttb.innerHTML = "Pro-tip: "+targ.getAttribute("data-tooltip");
			}.bind(els[i]));

			els[i].addEventListener("mouseout",function(e){
				var ttb = this.output;
				ttb.innerHTML = "";
			}.bind(els[i]));
		}

	}

}

//##########################################################
//#### iFrame Scroll behaviour #############################
//##########################################################
var scroll_disabled = false;

document.querySelector("#varinfoiframe").addEventListener("mouseover",function(e){

	try{

		if(e.target.contentDocument.body.scrollHeight> e.target.contentDocument.body.clientHeight){
			scroll_disabled = true;
		}


	}catch(e){
		//	console.warn("iFrame Scroll prevention doesnt work :(");
		//fail silently
	}

});

document.querySelector("#varinfoiframe").addEventListener("mouseout",function(e){
	scroll_disabled = false;
	document.querySelector("#varinfoiframe").style.borderColor="";
});

document.body.addEventListener("mousewheel",function(e){

	if(scroll_disabled){
		e.preventDefault();

		try{
			document.querySelector("#varinfoiframe").style.borderColor="orange";

			setTimeout(function(){
				document.querySelector("#varinfoiframe").style.borderColor="";
			},200);

		}catch(e){
			//	console.warn("iFrame Scroll prevention doesnt work :(");
			// fail silently
		}

	}

});
//##########################################################
//#### Contextual Help View ################################
//##########################################################

(function(){
	var xins = document.querySelectorAll("x-input");

	for(var i = 0;i<xins.length;i++){

		xins[i].addEventListener("mousedown",function(e){
			setHelpLoc("infos/"+e.target.id+".htm");
		})
	}

})()
var _current_help_url = "";

function setHelpLoc(url){
	// console.log(_current_help_url,document.querySelector("#varinfoiframe").contentWindow.location.pathname)
	// console.log(document.querySelector("#varinfoiframe").getAttribute("src"),url)
	// console.log(_current_help_url === document.querySelector("#varinfoiframe").contentWindow.location.pathname)
	// console.log(document.querySelector("#varinfoiframe").getAttribute("src") === url)
	if(document.querySelector("#varinfoiframe").contentWindow.location.pathname !== _current_help_url ||

			document.querySelector("#varinfoiframe").getAttribute("src")!==url){

		document.querySelector("#varinfoiframe").onload = function(){
			_current_help_url = document.querySelector("#varinfoiframe").contentWindow.location.pathname;
		};
		document.querySelector("#varinfoiframe").setAttribute("src",url);
	}

}

var ifrm = document.querySelector("#varinfoiframe");
var rm = document.querySelector("reo-manager");</script>
	</html>
			<!--
		<div id="elevationdiv" class="bmpblock" style="display:flex;flex-wrap:wrap;">
			<h1 style="display:block;width:100%">Elevation</h1>
			<div style="width:100%;">
				<canvas id="elevationcanvas" style="background-color:black;"></canvas>
			</div>
		</div>
		-->
	<!--
				<x-input	id="Ln"		
							notation ="$$$L_n$$$" 
							unit="mm"
							value="1000"
							type="number"
							min="0"
							max="50000"
							step="500"
							data-tooltip="Clear Span from edge to edge of supports"></x-input>
				<x-input	id="b"
							notation ="$$$b$$$"
							unit="mm"
							value="300"
							type="number"
							min="200"
							max="5000"
							step="5"
							data-tooltip="Breadth (horizontal width) of rectangular beam cross section"></x-input>
				<x-input	id="D"
							notation ="$$$D$$$"
							unit="mm"
							value="600"
							type="number"
							min="0"
							max="10000"
							step="10"
							data-tooltip="Total depth (vertical height) of beam from top to bottom surface"></x-input>
				<x-input	id="cover"
							notation ="$$$\text{Cover}$$$"
							unit="mm"
							value="25"
							type="number"
							min="20"
							max="100"
							step="5"
							data-tooltip="Distance from the outer surface of concrete to the reo bars (all around)"></x-input>
				<x-input	id="eclass"
							notation ="$$$\text{E. Class}$$$"
							options='["A1","A2","B1","B2","C1","C2"]'
							pattern="(A|B|C|D)"
							data-tooltip="Exposure Classification determined by exposure to natural environment. See AS3600 Table 4.3."></x-input>
				<x-input	id="df"
							notation="$$$d_f$$$"
							unit="mm"
							value="10"
							options="[10, 12, 16, 20, 24, 28, 32, 36, 40]"
							data-tooltip="Diameter of fitment bars (the 'ribcage') of the beam. Standard nominal diameters: [10, 12, 16, 20, 24, 28, 32, 36, 40]mm"></x-input> 
				<x-input	id="rhoc"
							notation="$$$\rho_c$$$"
							unit="kg/m&#179;"
							value="2400"
							type="number"
							min="2100"
							max="2800"
							step="10"
							data-tooltip="Concrete Density"></x-input>
				<x-input	id="fc"
							notation="$$$f'_c$$$"
							unit="MPa"
							value="32"
							options="[20, 25, 32, 40, 50, 65, 80, 100]"
							data-tooltip="Concrete Strength. This software only uses standard grades."></x-input>
					-->